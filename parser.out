Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> INTDEC NAME is_assing
Rule 2     is_assing -> = expression
Rule 3     is_assing -> <empty>
Rule 4     statement -> FLOATDEC NAME is_assing
Rule 5     statement -> BOOLEANDEC NAME is_assing
Rule 6     statement -> STRINGDEC NAME is_assing
Rule 7     statement -> PRINT ( expression )
Rule 8     statement -> NAME = expression
Rule 9     statement -> expression
Rule 10    expression -> expression + expression
Rule 11    expression -> expression - expression
Rule 12    expression -> expression * expression
Rule 13    expression -> expression / expression
Rule 14    expression -> expression ^ expression
Rule 15    expression -> - expression
Rule 16    expression -> ( expression )
Rule 17    expression -> INUMBER
Rule 18    expression -> FNUMBER
Rule 19    expression -> BOOLEAN
Rule 20    expression -> STRING
Rule 21    expression -> NAME

Terminals, with rules where they appear

(                    : 7 16
)                    : 7 16
*                    : 12
+                    : 10
-                    : 11 15
/                    : 13
=                    : 2 8
BOOLEAN              : 19
BOOLEANDEC           : 5
FLOATDEC             : 4
FNUMBER              : 18
INTDEC               : 1
INUMBER              : 17
NAME                 : 1 4 5 6 8 21
PRINT                : 7
STRING               : 20
STRINGDEC            : 6
^                    : 14
error                : 

Nonterminals, with rules where they appear

expression           : 2 7 8 9 10 10 11 11 12 12 13 13 14 14 15 16
is_assing            : 1 4 5 6
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . INTDEC NAME is_assing
    (4) statement -> . FLOATDEC NAME is_assing
    (5) statement -> . BOOLEANDEC NAME is_assing
    (6) statement -> . STRINGDEC NAME is_assing
    (7) statement -> . PRINT ( expression )
    (8) statement -> . NAME = expression
    (9) statement -> . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    INTDEC          shift and go to state 2
    FLOATDEC        shift and go to state 4
    BOOLEANDEC      shift and go to state 5
    STRINGDEC       shift and go to state 6
    PRINT           shift and go to state 7
    NAME            shift and go to state 3
    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14

    statement                      shift and go to state 1
    expression                     shift and go to state 9

state 1

    (0) S' -> statement .



state 2

    (1) statement -> INTDEC . NAME is_assing

    NAME            shift and go to state 15


state 3

    (8) statement -> NAME . = expression
    (21) expression -> NAME .

    =               shift and go to state 16
    +               reduce using rule 21 (expression -> NAME .)
    -               reduce using rule 21 (expression -> NAME .)
    *               reduce using rule 21 (expression -> NAME .)
    /               reduce using rule 21 (expression -> NAME .)
    ^               reduce using rule 21 (expression -> NAME .)
    $end            reduce using rule 21 (expression -> NAME .)


state 4

    (4) statement -> FLOATDEC . NAME is_assing

    NAME            shift and go to state 17


state 5

    (5) statement -> BOOLEANDEC . NAME is_assing

    NAME            shift and go to state 18


state 6

    (6) statement -> STRINGDEC . NAME is_assing

    NAME            shift and go to state 19


state 7

    (7) statement -> PRINT . ( expression )

    (               shift and go to state 20


state 8

    (16) expression -> ( . expression )
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 21

state 9

    (9) statement -> expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    $end            reduce using rule 9 (statement -> expression .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26
    ^               shift and go to state 27


state 10

    (15) expression -> - . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 28

state 11

    (17) expression -> INUMBER .

    +               reduce using rule 17 (expression -> INUMBER .)
    -               reduce using rule 17 (expression -> INUMBER .)
    *               reduce using rule 17 (expression -> INUMBER .)
    /               reduce using rule 17 (expression -> INUMBER .)
    ^               reduce using rule 17 (expression -> INUMBER .)
    $end            reduce using rule 17 (expression -> INUMBER .)
    )               reduce using rule 17 (expression -> INUMBER .)


state 12

    (18) expression -> FNUMBER .

    +               reduce using rule 18 (expression -> FNUMBER .)
    -               reduce using rule 18 (expression -> FNUMBER .)
    *               reduce using rule 18 (expression -> FNUMBER .)
    /               reduce using rule 18 (expression -> FNUMBER .)
    ^               reduce using rule 18 (expression -> FNUMBER .)
    $end            reduce using rule 18 (expression -> FNUMBER .)
    )               reduce using rule 18 (expression -> FNUMBER .)


state 13

    (19) expression -> BOOLEAN .

    +               reduce using rule 19 (expression -> BOOLEAN .)
    -               reduce using rule 19 (expression -> BOOLEAN .)
    *               reduce using rule 19 (expression -> BOOLEAN .)
    /               reduce using rule 19 (expression -> BOOLEAN .)
    ^               reduce using rule 19 (expression -> BOOLEAN .)
    $end            reduce using rule 19 (expression -> BOOLEAN .)
    )               reduce using rule 19 (expression -> BOOLEAN .)


state 14

    (20) expression -> STRING .

    +               reduce using rule 20 (expression -> STRING .)
    -               reduce using rule 20 (expression -> STRING .)
    *               reduce using rule 20 (expression -> STRING .)
    /               reduce using rule 20 (expression -> STRING .)
    ^               reduce using rule 20 (expression -> STRING .)
    $end            reduce using rule 20 (expression -> STRING .)
    )               reduce using rule 20 (expression -> STRING .)


state 15

    (1) statement -> INTDEC NAME . is_assing
    (2) is_assing -> . = expression
    (3) is_assing -> .

    =               shift and go to state 30
    $end            reduce using rule 3 (is_assing -> .)

    is_assing                      shift and go to state 29

state 16

    (8) statement -> NAME = . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 31

state 17

    (4) statement -> FLOATDEC NAME . is_assing
    (2) is_assing -> . = expression
    (3) is_assing -> .

    =               shift and go to state 30
    $end            reduce using rule 3 (is_assing -> .)

    is_assing                      shift and go to state 32

state 18

    (5) statement -> BOOLEANDEC NAME . is_assing
    (2) is_assing -> . = expression
    (3) is_assing -> .

    =               shift and go to state 30
    $end            reduce using rule 3 (is_assing -> .)

    is_assing                      shift and go to state 33

state 19

    (6) statement -> STRINGDEC NAME . is_assing
    (2) is_assing -> . = expression
    (3) is_assing -> .

    =               shift and go to state 30
    $end            reduce using rule 3 (is_assing -> .)

    is_assing                      shift and go to state 34

state 20

    (7) statement -> PRINT ( . expression )
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 35

state 21

    (16) expression -> ( expression . )
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    )               shift and go to state 36
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26
    ^               shift and go to state 27


state 22

    (21) expression -> NAME .

    )               reduce using rule 21 (expression -> NAME .)
    +               reduce using rule 21 (expression -> NAME .)
    -               reduce using rule 21 (expression -> NAME .)
    *               reduce using rule 21 (expression -> NAME .)
    /               reduce using rule 21 (expression -> NAME .)
    ^               reduce using rule 21 (expression -> NAME .)
    $end            reduce using rule 21 (expression -> NAME .)


state 23

    (10) expression -> expression + . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 37

state 24

    (11) expression -> expression - . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 38

state 25

    (12) expression -> expression * . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 39

state 26

    (13) expression -> expression / . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 40

state 27

    (14) expression -> expression ^ . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 41

state 28

    (15) expression -> - expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    +               reduce using rule 15 (expression -> - expression .)
    -               reduce using rule 15 (expression -> - expression .)
    *               reduce using rule 15 (expression -> - expression .)
    /               reduce using rule 15 (expression -> - expression .)
    ^               reduce using rule 15 (expression -> - expression .)
    $end            reduce using rule 15 (expression -> - expression .)
    )               reduce using rule 15 (expression -> - expression .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 26 ]
  ! ^               [ shift and go to state 27 ]


state 29

    (1) statement -> INTDEC NAME is_assing .

    $end            reduce using rule 1 (statement -> INTDEC NAME is_assing .)


state 30

    (2) is_assing -> = . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . ( expression )
    (17) expression -> . INUMBER
    (18) expression -> . FNUMBER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . NAME

    -               shift and go to state 10
    (               shift and go to state 8
    INUMBER         shift and go to state 11
    FNUMBER         shift and go to state 12
    BOOLEAN         shift and go to state 13
    STRING          shift and go to state 14
    NAME            shift and go to state 22

    expression                     shift and go to state 42

state 31

    (8) statement -> NAME = expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    $end            reduce using rule 8 (statement -> NAME = expression .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26
    ^               shift and go to state 27


state 32

    (4) statement -> FLOATDEC NAME is_assing .

    $end            reduce using rule 4 (statement -> FLOATDEC NAME is_assing .)


state 33

    (5) statement -> BOOLEANDEC NAME is_assing .

    $end            reduce using rule 5 (statement -> BOOLEANDEC NAME is_assing .)


state 34

    (6) statement -> STRINGDEC NAME is_assing .

    $end            reduce using rule 6 (statement -> STRINGDEC NAME is_assing .)


state 35

    (7) statement -> PRINT ( expression . )
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    )               shift and go to state 43
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26
    ^               shift and go to state 27


state 36

    (16) expression -> ( expression ) .

    +               reduce using rule 16 (expression -> ( expression ) .)
    -               reduce using rule 16 (expression -> ( expression ) .)
    *               reduce using rule 16 (expression -> ( expression ) .)
    /               reduce using rule 16 (expression -> ( expression ) .)
    ^               reduce using rule 16 (expression -> ( expression ) .)
    $end            reduce using rule 16 (expression -> ( expression ) .)
    )               reduce using rule 16 (expression -> ( expression ) .)


state 37

    (10) expression -> expression + expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    +               reduce using rule 10 (expression -> expression + expression .)
    -               reduce using rule 10 (expression -> expression + expression .)
    ^               reduce using rule 10 (expression -> expression + expression .)
    $end            reduce using rule 10 (expression -> expression + expression .)
    )               reduce using rule 10 (expression -> expression + expression .)
    *               shift and go to state 25
    /               shift and go to state 26

  ! *               [ reduce using rule 10 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! ^               [ shift and go to state 27 ]


state 38

    (11) expression -> expression - expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    +               reduce using rule 11 (expression -> expression - expression .)
    -               reduce using rule 11 (expression -> expression - expression .)
    ^               reduce using rule 11 (expression -> expression - expression .)
    $end            reduce using rule 11 (expression -> expression - expression .)
    )               reduce using rule 11 (expression -> expression - expression .)
    *               shift and go to state 25
    /               shift and go to state 26

  ! *               [ reduce using rule 11 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! ^               [ shift and go to state 27 ]


state 39

    (12) expression -> expression * expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    +               reduce using rule 12 (expression -> expression * expression .)
    -               reduce using rule 12 (expression -> expression * expression .)
    *               reduce using rule 12 (expression -> expression * expression .)
    /               reduce using rule 12 (expression -> expression * expression .)
    ^               reduce using rule 12 (expression -> expression * expression .)
    $end            reduce using rule 12 (expression -> expression * expression .)
    )               reduce using rule 12 (expression -> expression * expression .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 26 ]
  ! ^               [ shift and go to state 27 ]


state 40

    (13) expression -> expression / expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    +               reduce using rule 13 (expression -> expression / expression .)
    -               reduce using rule 13 (expression -> expression / expression .)
    *               reduce using rule 13 (expression -> expression / expression .)
    /               reduce using rule 13 (expression -> expression / expression .)
    ^               reduce using rule 13 (expression -> expression / expression .)
    $end            reduce using rule 13 (expression -> expression / expression .)
    )               reduce using rule 13 (expression -> expression / expression .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 26 ]
  ! ^               [ shift and go to state 27 ]


state 41

    (14) expression -> expression ^ expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
    $end            reduce using rule 14 (expression -> expression ^ expression .)
    )               reduce using rule 14 (expression -> expression ^ expression .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26
    ^               shift and go to state 27

  ! +               [ reduce using rule 14 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression ^ expression .) ]
  ! ^               [ reduce using rule 14 (expression -> expression ^ expression .) ]


state 42

    (2) is_assing -> = expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression
    (14) expression -> expression . ^ expression

    $end            reduce using rule 2 (is_assing -> = expression .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26
    ^               shift and go to state 27


state 43

    (7) statement -> PRINT ( expression ) .

    $end            reduce using rule 7 (statement -> PRINT ( expression ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 41 resolved as shift
WARNING: shift/reduce conflict for - in state 41 resolved as shift
WARNING: shift/reduce conflict for * in state 41 resolved as shift
WARNING: shift/reduce conflict for / in state 41 resolved as shift
WARNING: shift/reduce conflict for ^ in state 41 resolved as shift
