Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> block
Rule 1     block -> code block
Rule 2     block -> code
Rule 3     code -> statement SEMICOLON
Rule 4     code -> flowctrl
Rule 5     statement -> INTDEC NAME is_assing
Rule 6     statement -> FLOATDEC NAME is_assing
Rule 7     statement -> BOOLEANDEC NAME is_assing
Rule 8     statement -> STRINGDEC NAME is_assing
Rule 9     statement -> PRINT ( expression )
Rule 10    statement -> NAME = expression
Rule 11    statement -> expression
Rule 12    expression -> expression_boolean
Rule 13    expression -> <empty>
Rule 14    is_assing -> = expression
Rule 15    is_assing -> <empty>
Rule 16    expression -> expression + expression
Rule 17    expression -> expression - expression
Rule 18    expression -> expression * expression
Rule 19    expression -> expression / expression
Rule 20    expression -> expression ^ expression
Rule 21    expression_boolean -> expression EQUAL expression
Rule 22    expression_boolean -> expression NOTEQUAL expression
Rule 23    expression_boolean -> expression GREATER expression
Rule 24    expression_boolean -> expression LESSTHAN expression
Rule 25    expression_boolean -> expression GREATEREQUAL expression
Rule 26    expression_boolean -> expression LESSEQUAL expression
Rule 27    expression_boolean -> expression AND expression
Rule 28    expression_boolean -> expression OR expression
Rule 29    expression -> - expression
Rule 30    expression -> ( expression )
Rule 31    expression -> INUMBER
Rule 32    expression -> FNUMBER
Rule 33    expression -> BOOLEAN
Rule 34    expression -> STRING
Rule 35    expression -> NAME
Rule 36    flowctrl -> IF ( expression_boolean ) { block } elif else
Rule 37    elif -> ELIF ( expression_boolean ) { block } elif else
Rule 38    elif -> <empty>
Rule 39    else -> ELSE { block }
Rule 40    else -> <empty>

Terminals, with rules where they appear

(                    : 9 30 36 37
)                    : 9 30 36 37
*                    : 18
+                    : 16
-                    : 17 29
/                    : 19
=                    : 10 14
AND                  : 27
BOOLEAN              : 33
BOOLEANDEC           : 7
ELIF                 : 37
ELSE                 : 39
EQUAL                : 21
FLOATDEC             : 6
FNUMBER              : 32
GREATER              : 23
GREATEREQUAL         : 25
IF                   : 36
INTDEC               : 5
INUMBER              : 31
LESSEQUAL            : 26
LESSTHAN             : 24
NAME                 : 5 6 7 8 10 35
NOTEQUAL             : 22
OR                   : 28
PRINT                : 9
SEMICOLON            : 3
STRING               : 34
STRINGDEC            : 8
^                    : 20
error                : 
{                    : 36 37 39
}                    : 36 37 39

Nonterminals, with rules where they appear

block                : 1 36 37 39 0
code                 : 1 2
elif                 : 36 37
else                 : 36 37
expression           : 9 10 11 14 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 30
expression_boolean   : 12 36 37
flowctrl             : 4
is_assing            : 5 6 7 8
statement            : 3

Parsing method: LALR

state 0

    (0) S' -> . block
    (1) block -> . code block
    (2) block -> . code
    (3) code -> . statement SEMICOLON
    (4) code -> . flowctrl
    (5) statement -> . INTDEC NAME is_assing
    (6) statement -> . FLOATDEC NAME is_assing
    (7) statement -> . BOOLEANDEC NAME is_assing
    (8) statement -> . STRINGDEC NAME is_assing
    (9) statement -> . PRINT ( expression )
    (10) statement -> . NAME = expression
    (11) statement -> . expression
    (36) flowctrl -> . IF ( expression_boolean ) { block } elif else
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    INTDEC          shift and go to state 5
    FLOATDEC        shift and go to state 7
    BOOLEANDEC      shift and go to state 8
    STRINGDEC       shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 6
    IF              shift and go to state 13
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19

  ! -               [ reduce using rule 13 (expression -> .) ]

    block                          shift and go to state 1
    code                           shift and go to state 2
    statement                      shift and go to state 3
    flowctrl                       shift and go to state 4
    expression                     shift and go to state 12
    expression_boolean             shift and go to state 14

state 1

    (0) S' -> block .



state 2

    (1) block -> code . block
    (2) block -> code .
    (1) block -> . code block
    (2) block -> . code
    (3) code -> . statement SEMICOLON
    (4) code -> . flowctrl
    (5) statement -> . INTDEC NAME is_assing
    (6) statement -> . FLOATDEC NAME is_assing
    (7) statement -> . BOOLEANDEC NAME is_assing
    (8) statement -> . STRINGDEC NAME is_assing
    (9) statement -> . PRINT ( expression )
    (10) statement -> . NAME = expression
    (11) statement -> . expression
    (36) flowctrl -> . IF ( expression_boolean ) { block } elif else
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    $end            reduce using rule 2 (block -> code .)
    }               reduce using rule 2 (block -> code .)
    INTDEC          shift and go to state 5
    FLOATDEC        shift and go to state 7
    BOOLEANDEC      shift and go to state 8
    STRINGDEC       shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 6
    IF              shift and go to state 13
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19

  ! -               [ reduce using rule 13 (expression -> .) ]

    code                           shift and go to state 2
    block                          shift and go to state 20
    statement                      shift and go to state 3
    flowctrl                       shift and go to state 4
    expression                     shift and go to state 12
    expression_boolean             shift and go to state 14

state 3

    (3) code -> statement . SEMICOLON

    SEMICOLON       shift and go to state 21


state 4

    (4) code -> flowctrl .

    INTDEC          reduce using rule 4 (code -> flowctrl .)
    FLOATDEC        reduce using rule 4 (code -> flowctrl .)
    BOOLEANDEC      reduce using rule 4 (code -> flowctrl .)
    STRINGDEC       reduce using rule 4 (code -> flowctrl .)
    PRINT           reduce using rule 4 (code -> flowctrl .)
    NAME            reduce using rule 4 (code -> flowctrl .)
    IF              reduce using rule 4 (code -> flowctrl .)
    -               reduce using rule 4 (code -> flowctrl .)
    (               reduce using rule 4 (code -> flowctrl .)
    INUMBER         reduce using rule 4 (code -> flowctrl .)
    FNUMBER         reduce using rule 4 (code -> flowctrl .)
    BOOLEAN         reduce using rule 4 (code -> flowctrl .)
    STRING          reduce using rule 4 (code -> flowctrl .)
    SEMICOLON       reduce using rule 4 (code -> flowctrl .)
    +               reduce using rule 4 (code -> flowctrl .)
    *               reduce using rule 4 (code -> flowctrl .)
    /               reduce using rule 4 (code -> flowctrl .)
    ^               reduce using rule 4 (code -> flowctrl .)
    EQUAL           reduce using rule 4 (code -> flowctrl .)
    NOTEQUAL        reduce using rule 4 (code -> flowctrl .)
    GREATER         reduce using rule 4 (code -> flowctrl .)
    LESSTHAN        reduce using rule 4 (code -> flowctrl .)
    GREATEREQUAL    reduce using rule 4 (code -> flowctrl .)
    LESSEQUAL       reduce using rule 4 (code -> flowctrl .)
    AND             reduce using rule 4 (code -> flowctrl .)
    OR              reduce using rule 4 (code -> flowctrl .)
    $end            reduce using rule 4 (code -> flowctrl .)
    }               reduce using rule 4 (code -> flowctrl .)


state 5

    (5) statement -> INTDEC . NAME is_assing

    NAME            shift and go to state 22


state 6

    (10) statement -> NAME . = expression
    (35) expression -> NAME .

    =               shift and go to state 23
    +               reduce using rule 35 (expression -> NAME .)
    -               reduce using rule 35 (expression -> NAME .)
    *               reduce using rule 35 (expression -> NAME .)
    /               reduce using rule 35 (expression -> NAME .)
    ^               reduce using rule 35 (expression -> NAME .)
    EQUAL           reduce using rule 35 (expression -> NAME .)
    NOTEQUAL        reduce using rule 35 (expression -> NAME .)
    GREATER         reduce using rule 35 (expression -> NAME .)
    LESSTHAN        reduce using rule 35 (expression -> NAME .)
    GREATEREQUAL    reduce using rule 35 (expression -> NAME .)
    LESSEQUAL       reduce using rule 35 (expression -> NAME .)
    AND             reduce using rule 35 (expression -> NAME .)
    OR              reduce using rule 35 (expression -> NAME .)
    SEMICOLON       reduce using rule 35 (expression -> NAME .)


state 7

    (6) statement -> FLOATDEC . NAME is_assing

    NAME            shift and go to state 24


state 8

    (7) statement -> BOOLEANDEC . NAME is_assing

    NAME            shift and go to state 25


state 9

    (8) statement -> STRINGDEC . NAME is_assing

    NAME            shift and go to state 26


state 10

    (9) statement -> PRINT . ( expression )

    (               shift and go to state 27


state 11

    (30) expression -> ( . expression )
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    )               reduce using rule 13 (expression -> .)
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 28
    expression_boolean             shift and go to state 14

state 12

    (11) statement -> expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    SEMICOLON       reduce using rule 11 (statement -> expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 13

    (36) flowctrl -> IF . ( expression_boolean ) { block } elif else

    (               shift and go to state 43


state 14

    (12) expression -> expression_boolean .

    +               reduce using rule 12 (expression -> expression_boolean .)
    -               reduce using rule 12 (expression -> expression_boolean .)
    *               reduce using rule 12 (expression -> expression_boolean .)
    /               reduce using rule 12 (expression -> expression_boolean .)
    ^               reduce using rule 12 (expression -> expression_boolean .)
    EQUAL           reduce using rule 12 (expression -> expression_boolean .)
    NOTEQUAL        reduce using rule 12 (expression -> expression_boolean .)
    GREATER         reduce using rule 12 (expression -> expression_boolean .)
    LESSTHAN        reduce using rule 12 (expression -> expression_boolean .)
    GREATEREQUAL    reduce using rule 12 (expression -> expression_boolean .)
    LESSEQUAL       reduce using rule 12 (expression -> expression_boolean .)
    AND             reduce using rule 12 (expression -> expression_boolean .)
    OR              reduce using rule 12 (expression -> expression_boolean .)
    SEMICOLON       reduce using rule 12 (expression -> expression_boolean .)
    )               reduce using rule 12 (expression -> expression_boolean .)


state 15

    (29) expression -> - . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 44
    expression_boolean             shift and go to state 14

state 16

    (31) expression -> INUMBER .

    +               reduce using rule 31 (expression -> INUMBER .)
    -               reduce using rule 31 (expression -> INUMBER .)
    *               reduce using rule 31 (expression -> INUMBER .)
    /               reduce using rule 31 (expression -> INUMBER .)
    ^               reduce using rule 31 (expression -> INUMBER .)
    EQUAL           reduce using rule 31 (expression -> INUMBER .)
    NOTEQUAL        reduce using rule 31 (expression -> INUMBER .)
    GREATER         reduce using rule 31 (expression -> INUMBER .)
    LESSTHAN        reduce using rule 31 (expression -> INUMBER .)
    GREATEREQUAL    reduce using rule 31 (expression -> INUMBER .)
    LESSEQUAL       reduce using rule 31 (expression -> INUMBER .)
    AND             reduce using rule 31 (expression -> INUMBER .)
    OR              reduce using rule 31 (expression -> INUMBER .)
    SEMICOLON       reduce using rule 31 (expression -> INUMBER .)
    )               reduce using rule 31 (expression -> INUMBER .)


state 17

    (32) expression -> FNUMBER .

    +               reduce using rule 32 (expression -> FNUMBER .)
    -               reduce using rule 32 (expression -> FNUMBER .)
    *               reduce using rule 32 (expression -> FNUMBER .)
    /               reduce using rule 32 (expression -> FNUMBER .)
    ^               reduce using rule 32 (expression -> FNUMBER .)
    EQUAL           reduce using rule 32 (expression -> FNUMBER .)
    NOTEQUAL        reduce using rule 32 (expression -> FNUMBER .)
    GREATER         reduce using rule 32 (expression -> FNUMBER .)
    LESSTHAN        reduce using rule 32 (expression -> FNUMBER .)
    GREATEREQUAL    reduce using rule 32 (expression -> FNUMBER .)
    LESSEQUAL       reduce using rule 32 (expression -> FNUMBER .)
    AND             reduce using rule 32 (expression -> FNUMBER .)
    OR              reduce using rule 32 (expression -> FNUMBER .)
    SEMICOLON       reduce using rule 32 (expression -> FNUMBER .)
    )               reduce using rule 32 (expression -> FNUMBER .)


state 18

    (33) expression -> BOOLEAN .

    +               reduce using rule 33 (expression -> BOOLEAN .)
    -               reduce using rule 33 (expression -> BOOLEAN .)
    *               reduce using rule 33 (expression -> BOOLEAN .)
    /               reduce using rule 33 (expression -> BOOLEAN .)
    ^               reduce using rule 33 (expression -> BOOLEAN .)
    EQUAL           reduce using rule 33 (expression -> BOOLEAN .)
    NOTEQUAL        reduce using rule 33 (expression -> BOOLEAN .)
    GREATER         reduce using rule 33 (expression -> BOOLEAN .)
    LESSTHAN        reduce using rule 33 (expression -> BOOLEAN .)
    GREATEREQUAL    reduce using rule 33 (expression -> BOOLEAN .)
    LESSEQUAL       reduce using rule 33 (expression -> BOOLEAN .)
    AND             reduce using rule 33 (expression -> BOOLEAN .)
    OR              reduce using rule 33 (expression -> BOOLEAN .)
    SEMICOLON       reduce using rule 33 (expression -> BOOLEAN .)
    )               reduce using rule 33 (expression -> BOOLEAN .)


state 19

    (34) expression -> STRING .

    +               reduce using rule 34 (expression -> STRING .)
    -               reduce using rule 34 (expression -> STRING .)
    *               reduce using rule 34 (expression -> STRING .)
    /               reduce using rule 34 (expression -> STRING .)
    ^               reduce using rule 34 (expression -> STRING .)
    EQUAL           reduce using rule 34 (expression -> STRING .)
    NOTEQUAL        reduce using rule 34 (expression -> STRING .)
    GREATER         reduce using rule 34 (expression -> STRING .)
    LESSTHAN        reduce using rule 34 (expression -> STRING .)
    GREATEREQUAL    reduce using rule 34 (expression -> STRING .)
    LESSEQUAL       reduce using rule 34 (expression -> STRING .)
    AND             reduce using rule 34 (expression -> STRING .)
    OR              reduce using rule 34 (expression -> STRING .)
    SEMICOLON       reduce using rule 34 (expression -> STRING .)
    )               reduce using rule 34 (expression -> STRING .)


state 20

    (1) block -> code block .

    $end            reduce using rule 1 (block -> code block .)
    }               reduce using rule 1 (block -> code block .)


state 21

    (3) code -> statement SEMICOLON .

    INTDEC          reduce using rule 3 (code -> statement SEMICOLON .)
    FLOATDEC        reduce using rule 3 (code -> statement SEMICOLON .)
    BOOLEANDEC      reduce using rule 3 (code -> statement SEMICOLON .)
    STRINGDEC       reduce using rule 3 (code -> statement SEMICOLON .)
    PRINT           reduce using rule 3 (code -> statement SEMICOLON .)
    NAME            reduce using rule 3 (code -> statement SEMICOLON .)
    IF              reduce using rule 3 (code -> statement SEMICOLON .)
    -               reduce using rule 3 (code -> statement SEMICOLON .)
    (               reduce using rule 3 (code -> statement SEMICOLON .)
    INUMBER         reduce using rule 3 (code -> statement SEMICOLON .)
    FNUMBER         reduce using rule 3 (code -> statement SEMICOLON .)
    BOOLEAN         reduce using rule 3 (code -> statement SEMICOLON .)
    STRING          reduce using rule 3 (code -> statement SEMICOLON .)
    SEMICOLON       reduce using rule 3 (code -> statement SEMICOLON .)
    +               reduce using rule 3 (code -> statement SEMICOLON .)
    *               reduce using rule 3 (code -> statement SEMICOLON .)
    /               reduce using rule 3 (code -> statement SEMICOLON .)
    ^               reduce using rule 3 (code -> statement SEMICOLON .)
    EQUAL           reduce using rule 3 (code -> statement SEMICOLON .)
    NOTEQUAL        reduce using rule 3 (code -> statement SEMICOLON .)
    GREATER         reduce using rule 3 (code -> statement SEMICOLON .)
    LESSTHAN        reduce using rule 3 (code -> statement SEMICOLON .)
    GREATEREQUAL    reduce using rule 3 (code -> statement SEMICOLON .)
    LESSEQUAL       reduce using rule 3 (code -> statement SEMICOLON .)
    AND             reduce using rule 3 (code -> statement SEMICOLON .)
    OR              reduce using rule 3 (code -> statement SEMICOLON .)
    $end            reduce using rule 3 (code -> statement SEMICOLON .)
    }               reduce using rule 3 (code -> statement SEMICOLON .)


state 22

    (5) statement -> INTDEC NAME . is_assing
    (14) is_assing -> . = expression
    (15) is_assing -> .

    =               shift and go to state 46
    SEMICOLON       reduce using rule 15 (is_assing -> .)

    is_assing                      shift and go to state 45

state 23

    (10) statement -> NAME = . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 47
    expression_boolean             shift and go to state 14

state 24

    (6) statement -> FLOATDEC NAME . is_assing
    (14) is_assing -> . = expression
    (15) is_assing -> .

    =               shift and go to state 46
    SEMICOLON       reduce using rule 15 (is_assing -> .)

    is_assing                      shift and go to state 48

state 25

    (7) statement -> BOOLEANDEC NAME . is_assing
    (14) is_assing -> . = expression
    (15) is_assing -> .

    =               shift and go to state 46
    SEMICOLON       reduce using rule 15 (is_assing -> .)

    is_assing                      shift and go to state 49

state 26

    (8) statement -> STRINGDEC NAME . is_assing
    (14) is_assing -> . = expression
    (15) is_assing -> .

    =               shift and go to state 46
    SEMICOLON       reduce using rule 15 (is_assing -> .)

    is_assing                      shift and go to state 50

state 27

    (9) statement -> PRINT ( . expression )
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    )               reduce using rule 13 (expression -> .)
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 51
    expression_boolean             shift and go to state 14

state 28

    (30) expression -> ( expression . )
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    )               shift and go to state 52
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 29

    (35) expression -> NAME .

    )               reduce using rule 35 (expression -> NAME .)
    +               reduce using rule 35 (expression -> NAME .)
    -               reduce using rule 35 (expression -> NAME .)
    *               reduce using rule 35 (expression -> NAME .)
    /               reduce using rule 35 (expression -> NAME .)
    ^               reduce using rule 35 (expression -> NAME .)
    EQUAL           reduce using rule 35 (expression -> NAME .)
    NOTEQUAL        reduce using rule 35 (expression -> NAME .)
    GREATER         reduce using rule 35 (expression -> NAME .)
    LESSTHAN        reduce using rule 35 (expression -> NAME .)
    GREATEREQUAL    reduce using rule 35 (expression -> NAME .)
    LESSEQUAL       reduce using rule 35 (expression -> NAME .)
    AND             reduce using rule 35 (expression -> NAME .)
    OR              reduce using rule 35 (expression -> NAME .)
    SEMICOLON       reduce using rule 35 (expression -> NAME .)


state 30

    (16) expression -> expression + . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 53
    expression_boolean             shift and go to state 14

state 31

    (17) expression -> expression - . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 54
    expression_boolean             shift and go to state 14

state 32

    (18) expression -> expression * . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 55
    expression_boolean             shift and go to state 14

state 33

    (19) expression -> expression / . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 56
    expression_boolean             shift and go to state 14

state 34

    (20) expression -> expression ^ . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 57
    expression_boolean             shift and go to state 14

state 35

    (21) expression_boolean -> expression EQUAL . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 58
    expression_boolean             shift and go to state 14

state 36

    (22) expression_boolean -> expression NOTEQUAL . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 59
    expression_boolean             shift and go to state 14

state 37

    (23) expression_boolean -> expression GREATER . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 60
    expression_boolean             shift and go to state 14

state 38

    (24) expression_boolean -> expression LESSTHAN . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 61
    expression_boolean             shift and go to state 14

state 39

    (25) expression_boolean -> expression GREATEREQUAL . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 62
    expression_boolean             shift and go to state 14

state 40

    (26) expression_boolean -> expression LESSEQUAL . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 63
    expression_boolean             shift and go to state 14

state 41

    (27) expression_boolean -> expression AND . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 64
    expression_boolean             shift and go to state 14

state 42

    (28) expression_boolean -> expression OR . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    )               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 65
    expression_boolean             shift and go to state 14

state 43

    (36) flowctrl -> IF ( . expression_boolean ) { block } elif else
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME

  ! shift/reduce conflict for - resolved as shift
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression_boolean             shift and go to state 66
    expression                     shift and go to state 67

state 44

    (29) expression -> - expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    +               reduce using rule 29 (expression -> - expression .)
    -               reduce using rule 29 (expression -> - expression .)
    *               reduce using rule 29 (expression -> - expression .)
    /               reduce using rule 29 (expression -> - expression .)
    ^               reduce using rule 29 (expression -> - expression .)
    EQUAL           reduce using rule 29 (expression -> - expression .)
    NOTEQUAL        reduce using rule 29 (expression -> - expression .)
    GREATER         reduce using rule 29 (expression -> - expression .)
    LESSTHAN        reduce using rule 29 (expression -> - expression .)
    GREATEREQUAL    reduce using rule 29 (expression -> - expression .)
    LESSEQUAL       reduce using rule 29 (expression -> - expression .)
    AND             reduce using rule 29 (expression -> - expression .)
    OR              reduce using rule 29 (expression -> - expression .)
    SEMICOLON       reduce using rule 29 (expression -> - expression .)
    )               reduce using rule 29 (expression -> - expression .)

  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! ^               [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESSTHAN        [ shift and go to state 38 ]
  ! GREATEREQUAL    [ shift and go to state 39 ]
  ! LESSEQUAL       [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 45

    (5) statement -> INTDEC NAME is_assing .

    SEMICOLON       reduce using rule 5 (statement -> INTDEC NAME is_assing .)


state 46

    (14) is_assing -> = . expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression                     shift and go to state 68
    expression_boolean             shift and go to state 14

state 47

    (10) statement -> NAME = expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    SEMICOLON       reduce using rule 10 (statement -> NAME = expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 48

    (6) statement -> FLOATDEC NAME is_assing .

    SEMICOLON       reduce using rule 6 (statement -> FLOATDEC NAME is_assing .)


state 49

    (7) statement -> BOOLEANDEC NAME is_assing .

    SEMICOLON       reduce using rule 7 (statement -> BOOLEANDEC NAME is_assing .)


state 50

    (8) statement -> STRINGDEC NAME is_assing .

    SEMICOLON       reduce using rule 8 (statement -> STRINGDEC NAME is_assing .)


state 51

    (9) statement -> PRINT ( expression . )
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    )               shift and go to state 69
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 52

    (30) expression -> ( expression ) .

    +               reduce using rule 30 (expression -> ( expression ) .)
    -               reduce using rule 30 (expression -> ( expression ) .)
    *               reduce using rule 30 (expression -> ( expression ) .)
    /               reduce using rule 30 (expression -> ( expression ) .)
    ^               reduce using rule 30 (expression -> ( expression ) .)
    EQUAL           reduce using rule 30 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 30 (expression -> ( expression ) .)
    GREATER         reduce using rule 30 (expression -> ( expression ) .)
    LESSTHAN        reduce using rule 30 (expression -> ( expression ) .)
    GREATEREQUAL    reduce using rule 30 (expression -> ( expression ) .)
    LESSEQUAL       reduce using rule 30 (expression -> ( expression ) .)
    AND             reduce using rule 30 (expression -> ( expression ) .)
    OR              reduce using rule 30 (expression -> ( expression ) .)
    SEMICOLON       reduce using rule 30 (expression -> ( expression ) .)
    )               reduce using rule 30 (expression -> ( expression ) .)


state 53

    (16) expression -> expression + expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    +               reduce using rule 16 (expression -> expression + expression .)
    -               reduce using rule 16 (expression -> expression + expression .)
    ^               reduce using rule 16 (expression -> expression + expression .)
    EQUAL           reduce using rule 16 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 16 (expression -> expression + expression .)
    GREATER         reduce using rule 16 (expression -> expression + expression .)
    LESSTHAN        reduce using rule 16 (expression -> expression + expression .)
    GREATEREQUAL    reduce using rule 16 (expression -> expression + expression .)
    LESSEQUAL       reduce using rule 16 (expression -> expression + expression .)
    AND             reduce using rule 16 (expression -> expression + expression .)
    OR              reduce using rule 16 (expression -> expression + expression .)
    SEMICOLON       reduce using rule 16 (expression -> expression + expression .)
    )               reduce using rule 16 (expression -> expression + expression .)
    *               shift and go to state 32
    /               shift and go to state 33

  ! *               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 16 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! ^               [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESSTHAN        [ shift and go to state 38 ]
  ! GREATEREQUAL    [ shift and go to state 39 ]
  ! LESSEQUAL       [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 54

    (17) expression -> expression - expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    +               reduce using rule 17 (expression -> expression - expression .)
    -               reduce using rule 17 (expression -> expression - expression .)
    ^               reduce using rule 17 (expression -> expression - expression .)
    EQUAL           reduce using rule 17 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 17 (expression -> expression - expression .)
    GREATER         reduce using rule 17 (expression -> expression - expression .)
    LESSTHAN        reduce using rule 17 (expression -> expression - expression .)
    GREATEREQUAL    reduce using rule 17 (expression -> expression - expression .)
    LESSEQUAL       reduce using rule 17 (expression -> expression - expression .)
    AND             reduce using rule 17 (expression -> expression - expression .)
    OR              reduce using rule 17 (expression -> expression - expression .)
    SEMICOLON       reduce using rule 17 (expression -> expression - expression .)
    )               reduce using rule 17 (expression -> expression - expression .)
    *               shift and go to state 32
    /               shift and go to state 33

  ! *               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 17 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! ^               [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESSTHAN        [ shift and go to state 38 ]
  ! GREATEREQUAL    [ shift and go to state 39 ]
  ! LESSEQUAL       [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 55

    (18) expression -> expression * expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    +               reduce using rule 18 (expression -> expression * expression .)
    -               reduce using rule 18 (expression -> expression * expression .)
    *               reduce using rule 18 (expression -> expression * expression .)
    /               reduce using rule 18 (expression -> expression * expression .)
    ^               reduce using rule 18 (expression -> expression * expression .)
    EQUAL           reduce using rule 18 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 18 (expression -> expression * expression .)
    GREATER         reduce using rule 18 (expression -> expression * expression .)
    LESSTHAN        reduce using rule 18 (expression -> expression * expression .)
    GREATEREQUAL    reduce using rule 18 (expression -> expression * expression .)
    LESSEQUAL       reduce using rule 18 (expression -> expression * expression .)
    AND             reduce using rule 18 (expression -> expression * expression .)
    OR              reduce using rule 18 (expression -> expression * expression .)
    SEMICOLON       reduce using rule 18 (expression -> expression * expression .)
    )               reduce using rule 18 (expression -> expression * expression .)

  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! ^               [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESSTHAN        [ shift and go to state 38 ]
  ! GREATEREQUAL    [ shift and go to state 39 ]
  ! LESSEQUAL       [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 56

    (19) expression -> expression / expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    +               reduce using rule 19 (expression -> expression / expression .)
    -               reduce using rule 19 (expression -> expression / expression .)
    *               reduce using rule 19 (expression -> expression / expression .)
    /               reduce using rule 19 (expression -> expression / expression .)
    ^               reduce using rule 19 (expression -> expression / expression .)
    EQUAL           reduce using rule 19 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 19 (expression -> expression / expression .)
    GREATER         reduce using rule 19 (expression -> expression / expression .)
    LESSTHAN        reduce using rule 19 (expression -> expression / expression .)
    GREATEREQUAL    reduce using rule 19 (expression -> expression / expression .)
    LESSEQUAL       reduce using rule 19 (expression -> expression / expression .)
    AND             reduce using rule 19 (expression -> expression / expression .)
    OR              reduce using rule 19 (expression -> expression / expression .)
    SEMICOLON       reduce using rule 19 (expression -> expression / expression .)
    )               reduce using rule 19 (expression -> expression / expression .)

  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! ^               [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! NOTEQUAL        [ shift and go to state 36 ]
  ! GREATER         [ shift and go to state 37 ]
  ! LESSTHAN        [ shift and go to state 38 ]
  ! GREATEREQUAL    [ shift and go to state 39 ]
  ! LESSEQUAL       [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 57

    (20) expression -> expression ^ expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 20 (expression -> expression ^ expression .)
    )               reduce using rule 20 (expression -> expression ^ expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! +               [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! ^               [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! EQUAL           [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! NOTEQUAL        [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! GREATER         [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! LESSTHAN        [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! GREATEREQUAL    [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! LESSEQUAL       [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! AND             [ reduce using rule 20 (expression -> expression ^ expression .) ]
  ! OR              [ reduce using rule 20 (expression -> expression ^ expression .) ]


state 58

    (21) expression_boolean -> expression EQUAL expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 21 (expression_boolean -> expression EQUAL expression .)
    )               reduce using rule 21 (expression_boolean -> expression EQUAL expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! +               [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! ^               [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! GREATER         [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! GREATEREQUAL    [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! LESSEQUAL       [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 21 (expression_boolean -> expression EQUAL expression .) ]


state 59

    (22) expression_boolean -> expression NOTEQUAL expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .)
    )               reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! +               [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! ^               [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! GREATER         [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! GREATEREQUAL    [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! LESSEQUAL       [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 22 (expression_boolean -> expression NOTEQUAL expression .) ]


state 60

    (23) expression_boolean -> expression GREATER expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 23 (expression_boolean -> expression GREATER expression .)
    )               reduce using rule 23 (expression_boolean -> expression GREATER expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! +               [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! -               [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! *               [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! /               [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! ^               [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! EQUAL           [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! NOTEQUAL        [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! LESSTHAN        [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! GREATEREQUAL    [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! LESSEQUAL       [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! AND             [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]
  ! OR              [ reduce using rule 23 (expression_boolean -> expression GREATER expression .) ]


state 61

    (24) expression_boolean -> expression LESSTHAN expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .)
    )               reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! +               [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! -               [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! *               [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! /               [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! ^               [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! EQUAL           [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! NOTEQUAL        [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! GREATER         [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! GREATEREQUAL    [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! LESSEQUAL       [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 24 (expression_boolean -> expression LESSTHAN expression .) ]


state 62

    (25) expression_boolean -> expression GREATEREQUAL expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .)
    )               reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! +               [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! -               [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! *               [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! /               [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! ^               [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! EQUAL           [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! GREATER         [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! GREATEREQUAL    [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! LESSEQUAL       [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! AND             [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]
  ! OR              [ reduce using rule 25 (expression_boolean -> expression GREATEREQUAL expression .) ]


state 63

    (26) expression_boolean -> expression LESSEQUAL expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .)
    )               reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! +               [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! -               [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! *               [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! /               [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! ^               [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! GREATER         [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! GREATEREQUAL    [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! LESSEQUAL       [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! AND             [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]
  ! OR              [ reduce using rule 26 (expression_boolean -> expression LESSEQUAL expression .) ]


state 64

    (27) expression_boolean -> expression AND expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 27 (expression_boolean -> expression AND expression .)
    )               reduce using rule 27 (expression_boolean -> expression AND expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! +               [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! -               [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! *               [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! /               [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! ^               [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! GREATEREQUAL    [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! LESSEQUAL       [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! AND             [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]
  ! OR              [ reduce using rule 27 (expression_boolean -> expression AND expression .) ]


state 65

    (28) expression_boolean -> expression OR expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 28 (expression_boolean -> expression OR expression .)
    )               reduce using rule 28 (expression_boolean -> expression OR expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! +               [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! -               [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! *               [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! /               [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! ^               [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! GREATEREQUAL    [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! LESSEQUAL       [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! AND             [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]
  ! OR              [ reduce using rule 28 (expression_boolean -> expression OR expression .) ]


state 66

    (36) flowctrl -> IF ( expression_boolean . ) { block } elif else
    (12) expression -> expression_boolean .

    )               shift and go to state 70
    EQUAL           reduce using rule 12 (expression -> expression_boolean .)
    NOTEQUAL        reduce using rule 12 (expression -> expression_boolean .)
    GREATER         reduce using rule 12 (expression -> expression_boolean .)
    LESSTHAN        reduce using rule 12 (expression -> expression_boolean .)
    GREATEREQUAL    reduce using rule 12 (expression -> expression_boolean .)
    LESSEQUAL       reduce using rule 12 (expression -> expression_boolean .)
    AND             reduce using rule 12 (expression -> expression_boolean .)
    OR              reduce using rule 12 (expression -> expression_boolean .)
    +               reduce using rule 12 (expression -> expression_boolean .)
    -               reduce using rule 12 (expression -> expression_boolean .)
    *               reduce using rule 12 (expression -> expression_boolean .)
    /               reduce using rule 12 (expression -> expression_boolean .)
    ^               reduce using rule 12 (expression -> expression_boolean .)


state 67

    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression

    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34


state 68

    (14) is_assing -> = expression .
    (16) expression -> expression . + expression
    (17) expression -> expression . - expression
    (18) expression -> expression . * expression
    (19) expression -> expression . / expression
    (20) expression -> expression . ^ expression
    (21) expression_boolean -> expression . EQUAL expression
    (22) expression_boolean -> expression . NOTEQUAL expression
    (23) expression_boolean -> expression . GREATER expression
    (24) expression_boolean -> expression . LESSTHAN expression
    (25) expression_boolean -> expression . GREATEREQUAL expression
    (26) expression_boolean -> expression . LESSEQUAL expression
    (27) expression_boolean -> expression . AND expression
    (28) expression_boolean -> expression . OR expression

    SEMICOLON       reduce using rule 14 (is_assing -> = expression .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    ^               shift and go to state 34
    EQUAL           shift and go to state 35
    NOTEQUAL        shift and go to state 36
    GREATER         shift and go to state 37
    LESSTHAN        shift and go to state 38
    GREATEREQUAL    shift and go to state 39
    LESSEQUAL       shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 69

    (9) statement -> PRINT ( expression ) .

    SEMICOLON       reduce using rule 9 (statement -> PRINT ( expression ) .)


state 70

    (36) flowctrl -> IF ( expression_boolean ) . { block } elif else

    {               shift and go to state 71


state 71

    (36) flowctrl -> IF ( expression_boolean ) { . block } elif else
    (1) block -> . code block
    (2) block -> . code
    (3) code -> . statement SEMICOLON
    (4) code -> . flowctrl
    (5) statement -> . INTDEC NAME is_assing
    (6) statement -> . FLOATDEC NAME is_assing
    (7) statement -> . BOOLEANDEC NAME is_assing
    (8) statement -> . STRINGDEC NAME is_assing
    (9) statement -> . PRINT ( expression )
    (10) statement -> . NAME = expression
    (11) statement -> . expression
    (36) flowctrl -> . IF ( expression_boolean ) { block } elif else
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    INTDEC          shift and go to state 5
    FLOATDEC        shift and go to state 7
    BOOLEANDEC      shift and go to state 8
    STRINGDEC       shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 6
    IF              shift and go to state 13
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression_boolean             shift and go to state 14
    block                          shift and go to state 72
    code                           shift and go to state 2
    statement                      shift and go to state 3
    flowctrl                       shift and go to state 4
    expression                     shift and go to state 12

state 72

    (36) flowctrl -> IF ( expression_boolean ) { block . } elif else

    }               shift and go to state 73


state 73

    (36) flowctrl -> IF ( expression_boolean ) { block } . elif else
    (37) elif -> . ELIF ( expression_boolean ) { block } elif else
    (38) elif -> .

    ELIF            shift and go to state 75
    ELSE            reduce using rule 38 (elif -> .)
    INTDEC          reduce using rule 38 (elif -> .)
    FLOATDEC        reduce using rule 38 (elif -> .)
    BOOLEANDEC      reduce using rule 38 (elif -> .)
    STRINGDEC       reduce using rule 38 (elif -> .)
    PRINT           reduce using rule 38 (elif -> .)
    NAME            reduce using rule 38 (elif -> .)
    IF              reduce using rule 38 (elif -> .)
    -               reduce using rule 38 (elif -> .)
    (               reduce using rule 38 (elif -> .)
    INUMBER         reduce using rule 38 (elif -> .)
    FNUMBER         reduce using rule 38 (elif -> .)
    BOOLEAN         reduce using rule 38 (elif -> .)
    STRING          reduce using rule 38 (elif -> .)
    SEMICOLON       reduce using rule 38 (elif -> .)
    +               reduce using rule 38 (elif -> .)
    *               reduce using rule 38 (elif -> .)
    /               reduce using rule 38 (elif -> .)
    ^               reduce using rule 38 (elif -> .)
    EQUAL           reduce using rule 38 (elif -> .)
    NOTEQUAL        reduce using rule 38 (elif -> .)
    GREATER         reduce using rule 38 (elif -> .)
    LESSTHAN        reduce using rule 38 (elif -> .)
    GREATEREQUAL    reduce using rule 38 (elif -> .)
    LESSEQUAL       reduce using rule 38 (elif -> .)
    AND             reduce using rule 38 (elif -> .)
    OR              reduce using rule 38 (elif -> .)
    $end            reduce using rule 38 (elif -> .)
    }               reduce using rule 38 (elif -> .)

    elif                           shift and go to state 74

state 74

    (36) flowctrl -> IF ( expression_boolean ) { block } elif . else
    (39) else -> . ELSE { block }
    (40) else -> .

    ELSE            shift and go to state 77
    INTDEC          reduce using rule 40 (else -> .)
    FLOATDEC        reduce using rule 40 (else -> .)
    BOOLEANDEC      reduce using rule 40 (else -> .)
    STRINGDEC       reduce using rule 40 (else -> .)
    PRINT           reduce using rule 40 (else -> .)
    NAME            reduce using rule 40 (else -> .)
    IF              reduce using rule 40 (else -> .)
    -               reduce using rule 40 (else -> .)
    (               reduce using rule 40 (else -> .)
    INUMBER         reduce using rule 40 (else -> .)
    FNUMBER         reduce using rule 40 (else -> .)
    BOOLEAN         reduce using rule 40 (else -> .)
    STRING          reduce using rule 40 (else -> .)
    SEMICOLON       reduce using rule 40 (else -> .)
    +               reduce using rule 40 (else -> .)
    *               reduce using rule 40 (else -> .)
    /               reduce using rule 40 (else -> .)
    ^               reduce using rule 40 (else -> .)
    EQUAL           reduce using rule 40 (else -> .)
    NOTEQUAL        reduce using rule 40 (else -> .)
    GREATER         reduce using rule 40 (else -> .)
    LESSTHAN        reduce using rule 40 (else -> .)
    GREATEREQUAL    reduce using rule 40 (else -> .)
    LESSEQUAL       reduce using rule 40 (else -> .)
    AND             reduce using rule 40 (else -> .)
    OR              reduce using rule 40 (else -> .)
    $end            reduce using rule 40 (else -> .)
    }               reduce using rule 40 (else -> .)

    else                           shift and go to state 76

state 75

    (37) elif -> ELIF . ( expression_boolean ) { block } elif else

    (               shift and go to state 78


state 76

    (36) flowctrl -> IF ( expression_boolean ) { block } elif else .

    INTDEC          reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    FLOATDEC        reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    BOOLEANDEC      reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    STRINGDEC       reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    PRINT           reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    NAME            reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    IF              reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    -               reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    (               reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    INUMBER         reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    FNUMBER         reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    BOOLEAN         reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    STRING          reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    SEMICOLON       reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    +               reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    *               reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    /               reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    ^               reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    EQUAL           reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    NOTEQUAL        reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    GREATER         reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    LESSTHAN        reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    GREATEREQUAL    reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    LESSEQUAL       reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    AND             reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    OR              reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    $end            reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)
    }               reduce using rule 36 (flowctrl -> IF ( expression_boolean ) { block } elif else .)


state 77

    (39) else -> ELSE . { block }

    {               shift and go to state 79


state 78

    (37) elif -> ELIF ( . expression_boolean ) { block } elif else
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME

  ! shift/reduce conflict for - resolved as shift
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19
    NAME            shift and go to state 29

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression_boolean             shift and go to state 80
    expression                     shift and go to state 67

state 79

    (39) else -> ELSE { . block }
    (1) block -> . code block
    (2) block -> . code
    (3) code -> . statement SEMICOLON
    (4) code -> . flowctrl
    (5) statement -> . INTDEC NAME is_assing
    (6) statement -> . FLOATDEC NAME is_assing
    (7) statement -> . BOOLEANDEC NAME is_assing
    (8) statement -> . STRINGDEC NAME is_assing
    (9) statement -> . PRINT ( expression )
    (10) statement -> . NAME = expression
    (11) statement -> . expression
    (36) flowctrl -> . IF ( expression_boolean ) { block } elif else
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    INTDEC          shift and go to state 5
    FLOATDEC        shift and go to state 7
    BOOLEANDEC      shift and go to state 8
    STRINGDEC       shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 6
    IF              shift and go to state 13
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19

  ! -               [ reduce using rule 13 (expression -> .) ]

    block                          shift and go to state 81
    code                           shift and go to state 2
    statement                      shift and go to state 3
    flowctrl                       shift and go to state 4
    expression                     shift and go to state 12
    expression_boolean             shift and go to state 14

state 80

    (37) elif -> ELIF ( expression_boolean . ) { block } elif else
    (12) expression -> expression_boolean .

    )               shift and go to state 82
    EQUAL           reduce using rule 12 (expression -> expression_boolean .)
    NOTEQUAL        reduce using rule 12 (expression -> expression_boolean .)
    GREATER         reduce using rule 12 (expression -> expression_boolean .)
    LESSTHAN        reduce using rule 12 (expression -> expression_boolean .)
    GREATEREQUAL    reduce using rule 12 (expression -> expression_boolean .)
    LESSEQUAL       reduce using rule 12 (expression -> expression_boolean .)
    AND             reduce using rule 12 (expression -> expression_boolean .)
    OR              reduce using rule 12 (expression -> expression_boolean .)
    +               reduce using rule 12 (expression -> expression_boolean .)
    -               reduce using rule 12 (expression -> expression_boolean .)
    *               reduce using rule 12 (expression -> expression_boolean .)
    /               reduce using rule 12 (expression -> expression_boolean .)
    ^               reduce using rule 12 (expression -> expression_boolean .)


state 81

    (39) else -> ELSE { block . }

    }               shift and go to state 83


state 82

    (37) elif -> ELIF ( expression_boolean ) . { block } elif else

    {               shift and go to state 84


state 83

    (39) else -> ELSE { block } .

    INTDEC          reduce using rule 39 (else -> ELSE { block } .)
    FLOATDEC        reduce using rule 39 (else -> ELSE { block } .)
    BOOLEANDEC      reduce using rule 39 (else -> ELSE { block } .)
    STRINGDEC       reduce using rule 39 (else -> ELSE { block } .)
    PRINT           reduce using rule 39 (else -> ELSE { block } .)
    NAME            reduce using rule 39 (else -> ELSE { block } .)
    IF              reduce using rule 39 (else -> ELSE { block } .)
    -               reduce using rule 39 (else -> ELSE { block } .)
    (               reduce using rule 39 (else -> ELSE { block } .)
    INUMBER         reduce using rule 39 (else -> ELSE { block } .)
    FNUMBER         reduce using rule 39 (else -> ELSE { block } .)
    BOOLEAN         reduce using rule 39 (else -> ELSE { block } .)
    STRING          reduce using rule 39 (else -> ELSE { block } .)
    SEMICOLON       reduce using rule 39 (else -> ELSE { block } .)
    +               reduce using rule 39 (else -> ELSE { block } .)
    *               reduce using rule 39 (else -> ELSE { block } .)
    /               reduce using rule 39 (else -> ELSE { block } .)
    ^               reduce using rule 39 (else -> ELSE { block } .)
    EQUAL           reduce using rule 39 (else -> ELSE { block } .)
    NOTEQUAL        reduce using rule 39 (else -> ELSE { block } .)
    GREATER         reduce using rule 39 (else -> ELSE { block } .)
    LESSTHAN        reduce using rule 39 (else -> ELSE { block } .)
    GREATEREQUAL    reduce using rule 39 (else -> ELSE { block } .)
    LESSEQUAL       reduce using rule 39 (else -> ELSE { block } .)
    AND             reduce using rule 39 (else -> ELSE { block } .)
    OR              reduce using rule 39 (else -> ELSE { block } .)
    $end            reduce using rule 39 (else -> ELSE { block } .)
    }               reduce using rule 39 (else -> ELSE { block } .)
    ELSE            reduce using rule 39 (else -> ELSE { block } .)


state 84

    (37) elif -> ELIF ( expression_boolean ) { . block } elif else
    (1) block -> . code block
    (2) block -> . code
    (3) code -> . statement SEMICOLON
    (4) code -> . flowctrl
    (5) statement -> . INTDEC NAME is_assing
    (6) statement -> . FLOATDEC NAME is_assing
    (7) statement -> . BOOLEANDEC NAME is_assing
    (8) statement -> . STRINGDEC NAME is_assing
    (9) statement -> . PRINT ( expression )
    (10) statement -> . NAME = expression
    (11) statement -> . expression
    (36) flowctrl -> . IF ( expression_boolean ) { block } elif else
    (12) expression -> . expression_boolean
    (13) expression -> .
    (16) expression -> . expression + expression
    (17) expression -> . expression - expression
    (18) expression -> . expression * expression
    (19) expression -> . expression / expression
    (20) expression -> . expression ^ expression
    (29) expression -> . - expression
    (30) expression -> . ( expression )
    (31) expression -> . INUMBER
    (32) expression -> . FNUMBER
    (33) expression -> . BOOLEAN
    (34) expression -> . STRING
    (35) expression -> . NAME
    (21) expression_boolean -> . expression EQUAL expression
    (22) expression_boolean -> . expression NOTEQUAL expression
    (23) expression_boolean -> . expression GREATER expression
    (24) expression_boolean -> . expression LESSTHAN expression
    (25) expression_boolean -> . expression GREATEREQUAL expression
    (26) expression_boolean -> . expression LESSEQUAL expression
    (27) expression_boolean -> . expression AND expression
    (28) expression_boolean -> . expression OR expression

  ! shift/reduce conflict for - resolved as shift
    INTDEC          shift and go to state 5
    FLOATDEC        shift and go to state 7
    BOOLEANDEC      shift and go to state 8
    STRINGDEC       shift and go to state 9
    PRINT           shift and go to state 10
    NAME            shift and go to state 6
    IF              shift and go to state 13
    +               reduce using rule 13 (expression -> .)
    *               reduce using rule 13 (expression -> .)
    /               reduce using rule 13 (expression -> .)
    ^               reduce using rule 13 (expression -> .)
    EQUAL           reduce using rule 13 (expression -> .)
    NOTEQUAL        reduce using rule 13 (expression -> .)
    GREATER         reduce using rule 13 (expression -> .)
    LESSTHAN        reduce using rule 13 (expression -> .)
    GREATEREQUAL    reduce using rule 13 (expression -> .)
    LESSEQUAL       reduce using rule 13 (expression -> .)
    AND             reduce using rule 13 (expression -> .)
    OR              reduce using rule 13 (expression -> .)
    SEMICOLON       reduce using rule 13 (expression -> .)
    -               shift and go to state 15
    (               shift and go to state 11
    INUMBER         shift and go to state 16
    FNUMBER         shift and go to state 17
    BOOLEAN         shift and go to state 18
    STRING          shift and go to state 19

  ! -               [ reduce using rule 13 (expression -> .) ]

    expression_boolean             shift and go to state 14
    block                          shift and go to state 85
    code                           shift and go to state 2
    statement                      shift and go to state 3
    flowctrl                       shift and go to state 4
    expression                     shift and go to state 12

state 85

    (37) elif -> ELIF ( expression_boolean ) { block . } elif else

    }               shift and go to state 86


state 86

    (37) elif -> ELIF ( expression_boolean ) { block } . elif else
    (37) elif -> . ELIF ( expression_boolean ) { block } elif else
    (38) elif -> .

    ELIF            shift and go to state 75
    ELSE            reduce using rule 38 (elif -> .)
    INTDEC          reduce using rule 38 (elif -> .)
    FLOATDEC        reduce using rule 38 (elif -> .)
    BOOLEANDEC      reduce using rule 38 (elif -> .)
    STRINGDEC       reduce using rule 38 (elif -> .)
    PRINT           reduce using rule 38 (elif -> .)
    NAME            reduce using rule 38 (elif -> .)
    IF              reduce using rule 38 (elif -> .)
    -               reduce using rule 38 (elif -> .)
    (               reduce using rule 38 (elif -> .)
    INUMBER         reduce using rule 38 (elif -> .)
    FNUMBER         reduce using rule 38 (elif -> .)
    BOOLEAN         reduce using rule 38 (elif -> .)
    STRING          reduce using rule 38 (elif -> .)
    SEMICOLON       reduce using rule 38 (elif -> .)
    +               reduce using rule 38 (elif -> .)
    *               reduce using rule 38 (elif -> .)
    /               reduce using rule 38 (elif -> .)
    ^               reduce using rule 38 (elif -> .)
    EQUAL           reduce using rule 38 (elif -> .)
    NOTEQUAL        reduce using rule 38 (elif -> .)
    GREATER         reduce using rule 38 (elif -> .)
    LESSTHAN        reduce using rule 38 (elif -> .)
    GREATEREQUAL    reduce using rule 38 (elif -> .)
    LESSEQUAL       reduce using rule 38 (elif -> .)
    AND             reduce using rule 38 (elif -> .)
    OR              reduce using rule 38 (elif -> .)
    $end            reduce using rule 38 (elif -> .)
    }               reduce using rule 38 (elif -> .)

    elif                           shift and go to state 87

state 87

    (37) elif -> ELIF ( expression_boolean ) { block } elif . else
    (39) else -> . ELSE { block }
    (40) else -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 77
    INTDEC          reduce using rule 40 (else -> .)
    FLOATDEC        reduce using rule 40 (else -> .)
    BOOLEANDEC      reduce using rule 40 (else -> .)
    STRINGDEC       reduce using rule 40 (else -> .)
    PRINT           reduce using rule 40 (else -> .)
    NAME            reduce using rule 40 (else -> .)
    IF              reduce using rule 40 (else -> .)
    -               reduce using rule 40 (else -> .)
    (               reduce using rule 40 (else -> .)
    INUMBER         reduce using rule 40 (else -> .)
    FNUMBER         reduce using rule 40 (else -> .)
    BOOLEAN         reduce using rule 40 (else -> .)
    STRING          reduce using rule 40 (else -> .)
    SEMICOLON       reduce using rule 40 (else -> .)
    +               reduce using rule 40 (else -> .)
    *               reduce using rule 40 (else -> .)
    /               reduce using rule 40 (else -> .)
    ^               reduce using rule 40 (else -> .)
    EQUAL           reduce using rule 40 (else -> .)
    NOTEQUAL        reduce using rule 40 (else -> .)
    GREATER         reduce using rule 40 (else -> .)
    LESSTHAN        reduce using rule 40 (else -> .)
    GREATEREQUAL    reduce using rule 40 (else -> .)
    LESSEQUAL       reduce using rule 40 (else -> .)
    AND             reduce using rule 40 (else -> .)
    OR              reduce using rule 40 (else -> .)
    $end            reduce using rule 40 (else -> .)
    }               reduce using rule 40 (else -> .)

  ! ELSE            [ reduce using rule 40 (else -> .) ]

    else                           shift and go to state 88

state 88

    (37) elif -> ELIF ( expression_boolean ) { block } elif else .

    ELSE            reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    INTDEC          reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    FLOATDEC        reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    BOOLEANDEC      reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    STRINGDEC       reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    PRINT           reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    NAME            reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    IF              reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    -               reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    (               reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    INUMBER         reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    FNUMBER         reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    BOOLEAN         reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    STRING          reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    SEMICOLON       reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    +               reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    *               reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    /               reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    ^               reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    EQUAL           reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    NOTEQUAL        reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    GREATER         reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    LESSTHAN        reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    GREATEREQUAL    reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    LESSEQUAL       reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    AND             reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    OR              reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    $end            reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)
    }               reduce using rule 37 (elif -> ELIF ( expression_boolean ) { block } elif else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for - in state 0 resolved as shift
WARNING: shift/reduce conflict for - in state 2 resolved as shift
WARNING: shift/reduce conflict for - in state 11 resolved as shift
WARNING: shift/reduce conflict for - in state 15 resolved as shift
WARNING: shift/reduce conflict for - in state 23 resolved as shift
WARNING: shift/reduce conflict for - in state 27 resolved as shift
WARNING: shift/reduce conflict for - in state 30 resolved as shift
WARNING: shift/reduce conflict for - in state 31 resolved as shift
WARNING: shift/reduce conflict for - in state 32 resolved as shift
WARNING: shift/reduce conflict for - in state 33 resolved as shift
WARNING: shift/reduce conflict for - in state 34 resolved as shift
WARNING: shift/reduce conflict for - in state 35 resolved as shift
WARNING: shift/reduce conflict for - in state 36 resolved as shift
WARNING: shift/reduce conflict for - in state 37 resolved as shift
WARNING: shift/reduce conflict for - in state 38 resolved as shift
WARNING: shift/reduce conflict for - in state 39 resolved as shift
WARNING: shift/reduce conflict for - in state 40 resolved as shift
WARNING: shift/reduce conflict for - in state 41 resolved as shift
WARNING: shift/reduce conflict for - in state 42 resolved as shift
WARNING: shift/reduce conflict for - in state 43 resolved as shift
WARNING: shift/reduce conflict for - in state 46 resolved as shift
WARNING: shift/reduce conflict for + in state 57 resolved as shift
WARNING: shift/reduce conflict for - in state 57 resolved as shift
WARNING: shift/reduce conflict for * in state 57 resolved as shift
WARNING: shift/reduce conflict for / in state 57 resolved as shift
WARNING: shift/reduce conflict for ^ in state 57 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 57 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for AND in state 57 resolved as shift
WARNING: shift/reduce conflict for OR in state 57 resolved as shift
WARNING: shift/reduce conflict for + in state 58 resolved as shift
WARNING: shift/reduce conflict for - in state 58 resolved as shift
WARNING: shift/reduce conflict for * in state 58 resolved as shift
WARNING: shift/reduce conflict for / in state 58 resolved as shift
WARNING: shift/reduce conflict for ^ in state 58 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 58 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 58 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 58 resolved as shift
WARNING: shift/reduce conflict for OR in state 58 resolved as shift
WARNING: shift/reduce conflict for + in state 59 resolved as shift
WARNING: shift/reduce conflict for - in state 59 resolved as shift
WARNING: shift/reduce conflict for * in state 59 resolved as shift
WARNING: shift/reduce conflict for / in state 59 resolved as shift
WARNING: shift/reduce conflict for ^ in state 59 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 59 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for + in state 60 resolved as shift
WARNING: shift/reduce conflict for - in state 60 resolved as shift
WARNING: shift/reduce conflict for * in state 60 resolved as shift
WARNING: shift/reduce conflict for / in state 60 resolved as shift
WARNING: shift/reduce conflict for ^ in state 60 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
WARNING: shift/reduce conflict for OR in state 60 resolved as shift
WARNING: shift/reduce conflict for + in state 61 resolved as shift
WARNING: shift/reduce conflict for - in state 61 resolved as shift
WARNING: shift/reduce conflict for * in state 61 resolved as shift
WARNING: shift/reduce conflict for / in state 61 resolved as shift
WARNING: shift/reduce conflict for ^ in state 61 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 61 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for AND in state 61 resolved as shift
WARNING: shift/reduce conflict for OR in state 61 resolved as shift
WARNING: shift/reduce conflict for + in state 62 resolved as shift
WARNING: shift/reduce conflict for - in state 62 resolved as shift
WARNING: shift/reduce conflict for * in state 62 resolved as shift
WARNING: shift/reduce conflict for / in state 62 resolved as shift
WARNING: shift/reduce conflict for ^ in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 62 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for + in state 63 resolved as shift
WARNING: shift/reduce conflict for - in state 63 resolved as shift
WARNING: shift/reduce conflict for * in state 63 resolved as shift
WARNING: shift/reduce conflict for / in state 63 resolved as shift
WARNING: shift/reduce conflict for ^ in state 63 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for + in state 64 resolved as shift
WARNING: shift/reduce conflict for - in state 64 resolved as shift
WARNING: shift/reduce conflict for * in state 64 resolved as shift
WARNING: shift/reduce conflict for / in state 64 resolved as shift
WARNING: shift/reduce conflict for ^ in state 64 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 64 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for + in state 65 resolved as shift
WARNING: shift/reduce conflict for - in state 65 resolved as shift
WARNING: shift/reduce conflict for * in state 65 resolved as shift
WARNING: shift/reduce conflict for / in state 65 resolved as shift
WARNING: shift/reduce conflict for ^ in state 65 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 65 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for - in state 71 resolved as shift
WARNING: shift/reduce conflict for - in state 78 resolved as shift
WARNING: shift/reduce conflict for - in state 79 resolved as shift
WARNING: shift/reduce conflict for - in state 84 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 87 resolved as shift
