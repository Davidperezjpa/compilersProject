
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSBOOLEAN BOOLEANDEC FLOATDEC FNUMBER INTDEC INUMBER NAME PRINT STRING STRINGDECstatement : INTDEC NAME is_assing\n    is_assing : "=" expression \n                | statement : FLOATDEC NAME is_assingstatement : BOOLEANDEC NAME is_assingstatement : STRINGDEC NAME is_assingstatement : PRINT \'(\' expression \')\' statement : NAME "=" expressionstatement : expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INUMBERexpression : FNUMBERexpression :  BOOLEANexpression :  STRINGexpression : NAME'
    
_lr_action_items = {'INTDEC':([0,],[2,]),'FLOATDEC':([0,],[4,]),'BOOLEANDEC':([0,],[5,]),'STRINGDEC':([0,],[6,]),'PRINT':([0,],[7,]),'NAME':([0,2,4,5,6,8,10,16,20,23,24,25,26,27,30,],[3,15,17,18,19,22,22,22,22,22,22,22,22,22,22,]),'-':([0,3,8,9,10,11,12,13,14,16,20,21,22,23,24,25,26,27,28,30,31,35,36,37,38,39,40,41,42,],[10,-21,10,24,10,-17,-18,-19,-20,10,10,24,-21,10,10,10,10,10,-15,10,24,24,-16,-10,-11,-12,-13,24,24,]),'(':([0,7,8,10,16,20,23,24,25,26,27,30,],[8,20,8,8,8,8,8,8,8,8,8,8,]),'INUMBER':([0,8,10,16,20,23,24,25,26,27,30,],[11,11,11,11,11,11,11,11,11,11,11,]),'FNUMBER':([0,8,10,16,20,23,24,25,26,27,30,],[12,12,12,12,12,12,12,12,12,12,12,]),'BOOLEAN':([0,8,10,16,20,23,24,25,26,27,30,],[13,13,13,13,13,13,13,13,13,13,13,]),'STRING':([0,8,10,16,20,23,24,25,26,27,30,],[14,14,14,14,14,14,14,14,14,14,14,]),'$end':([1,3,9,11,12,13,14,15,17,18,19,22,28,29,31,32,33,34,36,37,38,39,40,41,42,43,],[0,-21,-9,-17,-18,-19,-20,-3,-3,-3,-3,-21,-15,-1,-8,-4,-5,-6,-16,-10,-11,-12,-13,-14,-2,-7,]),'=':([3,15,17,18,19,],[16,30,30,30,30,]),'+':([3,9,11,12,13,14,21,22,28,31,35,36,37,38,39,40,41,42,],[-21,23,-17,-18,-19,-20,23,-21,-15,23,23,-16,-10,-11,-12,-13,23,23,]),'*':([3,9,11,12,13,14,21,22,28,31,35,36,37,38,39,40,41,42,],[-21,25,-17,-18,-19,-20,25,-21,-15,25,25,-16,25,25,-12,-13,25,25,]),'/':([3,9,11,12,13,14,21,22,28,31,35,36,37,38,39,40,41,42,],[-21,26,-17,-18,-19,-20,26,-21,-15,26,26,-16,26,26,-12,-13,26,26,]),'^':([3,9,11,12,13,14,21,22,28,31,35,36,37,38,39,40,41,42,],[-21,27,-17,-18,-19,-20,27,-21,-15,27,27,-16,-10,-11,-12,-13,27,27,]),')':([11,12,13,14,21,22,28,35,36,37,38,39,40,41,],[-17,-18,-19,-20,36,-21,-15,43,-16,-10,-11,-12,-13,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,8,10,16,20,23,24,25,26,27,30,],[9,21,28,31,35,37,38,39,40,41,42,]),'is_assing':([15,17,18,19,],[29,32,33,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> INTDEC NAME is_assing','statement',3,'p_statement_declare_int','compiler.py',91),
  ('is_assing -> = expression','is_assing',2,'p_is_assing','compiler.py',99),
  ('is_assing -> <empty>','is_assing',0,'p_is_assing','compiler.py',100),
  ('statement -> FLOATDEC NAME is_assing','statement',3,'p_statement_declare_float','compiler.py',106),
  ('statement -> BOOLEANDEC NAME is_assing','statement',3,'p_statement_declare_boolean','compiler.py',110),
  ('statement -> STRINGDEC NAME is_assing','statement',3,'p_statement_declare_string','compiler.py',114),
  ('statement -> PRINT ( expression )','statement',4,'p_statement_print','compiler.py',118),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','compiler.py',122),
  ('statement -> expression','statement',1,'p_statement_expr','compiler.py',128),
  ('expression -> expression + expression','expression',3,'p_expression_binop','compiler.py',132),
  ('expression -> expression - expression','expression',3,'p_expression_binop','compiler.py',133),
  ('expression -> expression * expression','expression',3,'p_expression_binop','compiler.py',134),
  ('expression -> expression / expression','expression',3,'p_expression_binop','compiler.py',135),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','compiler.py',136),
  ('expression -> - expression','expression',2,'p_expression_uminus','compiler.py',149),
  ('expression -> ( expression )','expression',3,'p_expression_group','compiler.py',153),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','compiler.py',157),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','compiler.py',161),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','compiler.py',165),
  ('expression -> STRING','expression',1,'p_expression_string','compiler.py',169),
  ('expression -> NAME','expression',1,'p_expression_name','compiler.py',175),
]
