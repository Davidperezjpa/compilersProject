
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSAND BOOLEAN BOOLEANDEC ELIF ELSE EQUAL FLOATDEC FNUMBER GREATER GREATEREQUAL IF INTDEC INUMBER LESSEQUAL LESSTHAN NAME NOTEQUAL OR PRINT SEMICOLON STRING STRINGDEC WHILE block : code block\n            | code code : statement SEMICOLON \n            | flowctrl statement : INTDEC NAME is_assing\n    statement : FLOATDEC NAME is_assingstatement : BOOLEANDEC NAME is_assingstatement : STRINGDEC NAME is_assingstatement : PRINT \'(\' expression \')\' statement : NAME "=" expression statement : expressionis_assing : \'=\' expression expression : expression_boolean\n                expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionexpression_boolean : expression EQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression GREATER expression\n                  | expression LESSTHAN expression\n                  | expression GREATEREQUAL expression\n                  | expression LESSEQUAL expressionexpression_boolean : expression AND expression\n                  | expression OR expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INUMBERexpression : FNUMBERexpression :  BOOLEANexpression :  STRINGexpression : NAME flowctrl : IF \'(\' expression_boolean \')\' \'{\' block \'}\' elif else  elif : ELIF \'(\' expression_boolean \')\' \'{\' block \'}\' elif\n        |   else : ELSE \'{\' block \'}\' \n        |   flowctrl : WHILE \'(\' expression_boolean \')\' \'{\' block \'}\' '
    
_lr_action_items = {'INTDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[5,5,-4,-3,5,5,-36,-39,-38,-34,5,-37,5,-36,-35,]),'FLOATDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[7,7,-4,-3,7,7,-36,-39,-38,-34,7,-37,7,-36,-35,]),'BOOLEANDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[8,8,-4,-3,8,8,-36,-39,-38,-34,8,-37,8,-36,-35,]),'STRINGDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[9,9,-4,-3,9,9,-36,-39,-38,-34,9,-37,9,-36,-35,]),'PRINT':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[10,10,-4,-3,10,10,-36,-39,-38,-34,10,-37,10,-36,-35,]),'NAME':([0,2,4,5,7,8,9,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[6,6,-4,23,25,26,27,30,30,-3,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,6,6,-36,-39,-38,-34,30,6,-37,6,-36,-35,]),'IF':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[13,13,-4,-3,13,13,-36,-39,-38,-34,13,-37,13,-36,-35,]),'WHILE':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[15,15,-4,-3,15,15,-36,-39,-38,-34,15,-37,15,-36,-35,]),'-':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[16,16,-4,-33,16,32,-13,16,-29,-30,-31,-32,-3,16,16,32,-33,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-27,16,32,32,-28,-14,-15,-16,-17,32,32,32,32,32,32,32,32,32,-13,32,-13,32,16,16,-36,-39,-38,-34,16,16,-13,-37,16,-36,-35,]),'(':([0,2,4,10,11,13,15,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,82,83,85,86,90,91,93,94,],[11,11,-4,28,11,44,45,11,-3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-36,-39,-38,85,-34,11,11,-37,11,-36,-35,]),'INUMBER':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[17,17,-4,17,17,-3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-36,-39,-38,-34,17,17,-37,17,-36,-35,]),'FNUMBER':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[18,18,-4,18,18,-3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-36,-39,-38,-34,18,18,-37,18,-36,-35,]),'BOOLEAN':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[19,19,-4,19,19,-3,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-36,-39,-38,-34,19,19,-37,19,-36,-35,]),'STRING':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[20,20,-4,20,20,-3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-36,-39,-38,-34,20,20,-37,20,-36,-35,]),'$end':([1,2,4,21,22,79,80,81,83,90,93,94,],[0,-2,-4,-1,-3,-36,-39,-38,-34,-37,-36,-35,]),'}':([2,4,21,22,77,78,79,80,81,83,88,90,92,93,94,],[-2,-4,-1,-3,79,80,-36,-39,-38,-34,90,-37,93,-36,-35,]),'SEMICOLON':([3,6,12,14,17,18,19,20,30,46,47,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,72,],[22,-33,-11,-13,-29,-30,-31,-32,-33,-27,-5,-10,-6,-7,-8,-28,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-12,-9,]),'=':([6,23,25,26,27,],[24,48,48,48,48,]),'+':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,31,-13,-29,-30,-31,-32,31,-33,-27,31,31,-28,-14,-15,-16,-17,31,31,31,31,31,31,31,31,31,-13,31,-13,31,-13,]),'*':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,33,-13,-29,-30,-31,-32,33,-33,-27,33,33,-28,33,33,-16,-17,33,33,33,33,33,33,33,33,33,-13,33,-13,33,-13,]),'/':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,34,-13,-29,-30,-31,-32,34,-33,-27,34,34,-28,34,34,-16,-17,34,34,34,34,34,34,34,34,34,-13,34,-13,34,-13,]),'^':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,35,-13,-29,-30,-31,-32,35,-33,-27,35,35,-28,-14,-15,-16,-17,35,35,35,35,35,35,35,35,35,-13,35,-13,35,-13,]),'EQUAL':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,36,-13,-29,-30,-31,-32,36,-33,-27,36,36,-28,-14,-15,-16,-17,36,36,36,36,36,36,36,36,36,-13,36,-13,36,-13,]),'NOTEQUAL':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,37,-13,-29,-30,-31,-32,37,-33,-27,37,37,-28,-14,-15,-16,-17,37,37,37,37,37,37,37,37,37,-13,37,-13,37,-13,]),'GREATER':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,38,-13,-29,-30,-31,-32,38,-33,-27,38,38,-28,-14,-15,-16,-17,38,38,38,38,38,38,38,38,38,-13,38,-13,38,-13,]),'LESSTHAN':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,39,-13,-29,-30,-31,-32,39,-33,-27,39,39,-28,-14,-15,-16,-17,39,39,39,39,39,39,39,39,39,-13,39,-13,39,-13,]),'GREATEREQUAL':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,40,-13,-29,-30,-31,-32,40,-33,-27,40,40,-28,-14,-15,-16,-17,40,40,40,40,40,40,40,40,40,-13,40,-13,40,-13,]),'LESSEQUAL':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,41,-13,-29,-30,-31,-32,41,-33,-27,41,41,-28,-14,-15,-16,-17,41,41,41,41,41,41,41,41,41,-13,41,-13,41,-13,]),'AND':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,42,-13,-29,-30,-31,-32,42,-33,-27,42,42,-28,-14,-15,-16,-17,42,42,42,42,42,42,42,42,42,-13,42,-13,42,-13,]),'OR':([6,12,14,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-33,43,-13,-29,-30,-31,-32,43,-33,-27,43,43,-28,-14,-15,-16,-17,43,43,43,43,43,43,43,43,43,-13,43,-13,43,-13,]),')':([14,17,18,19,20,29,30,46,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,87,],[-13,-29,-30,-31,-32,54,-33,-27,72,-28,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,73,74,89,]),'{':([73,74,84,89,],[75,76,86,91,]),'ELIF':([79,93,],[82,82,]),'ELSE':([79,81,93,94,],[-36,84,-36,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block':([0,2,75,76,86,91,],[1,21,77,78,88,92,]),'code':([0,2,75,76,86,91,],[2,2,2,2,2,2,]),'statement':([0,2,75,76,86,91,],[3,3,3,3,3,3,]),'flowctrl':([0,2,75,76,86,91,],[4,4,4,4,4,4,]),'expression':([0,2,11,16,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,85,86,91,],[12,12,29,46,49,53,55,56,57,58,59,60,61,62,63,64,65,66,67,69,69,71,12,12,69,12,12,]),'expression_boolean':([0,2,11,16,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,85,86,91,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,68,70,14,14,14,87,14,14,]),'is_assing':([23,25,26,27,],[47,50,51,52,]),'elif':([79,93,],[81,94,]),'else':([81,],[83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> code block','block',2,'p_block','parser.py',18),
  ('block -> code','block',1,'p_block','parser.py',19),
  ('code -> statement SEMICOLON','code',2,'p_code','parser.py',26),
  ('code -> flowctrl','code',1,'p_code','parser.py',27),
  ('statement -> INTDEC NAME is_assing','statement',3,'p_statement_declare_int','parser.py',31),
  ('statement -> FLOATDEC NAME is_assing','statement',3,'p_statement_declare_float','parser.py',47),
  ('statement -> BOOLEANDEC NAME is_assing','statement',3,'p_statement_declare_boolean','parser.py',58),
  ('statement -> STRINGDEC NAME is_assing','statement',3,'p_statement_declare_string','parser.py',69),
  ('statement -> PRINT ( expression )','statement',4,'p_statement_print','parser.py',81),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','parser.py',87),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',95),
  ('is_assing -> = expression','is_assing',2,'p_is_assing','parser.py',99),
  ('expression -> expression_boolean','expression',1,'p_bridge_expr','parser.py',111),
  ('expression -> expression + expression','expression',3,'p_expression_binop','parser.py',117),
  ('expression -> expression - expression','expression',3,'p_expression_binop','parser.py',118),
  ('expression -> expression * expression','expression',3,'p_expression_binop','parser.py',119),
  ('expression -> expression / expression','expression',3,'p_expression_binop','parser.py',120),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','parser.py',121),
  ('expression_boolean -> expression EQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',145),
  ('expression_boolean -> expression NOTEQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',146),
  ('expression_boolean -> expression GREATER expression','expression_boolean',3,'p_expression_compare','parser.py',147),
  ('expression_boolean -> expression LESSTHAN expression','expression_boolean',3,'p_expression_compare','parser.py',148),
  ('expression_boolean -> expression GREATEREQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',149),
  ('expression_boolean -> expression LESSEQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',150),
  ('expression_boolean -> expression AND expression','expression_boolean',3,'p_expression_boolean_andor','parser.py',178),
  ('expression_boolean -> expression OR expression','expression_boolean',3,'p_expression_boolean_andor','parser.py',179),
  ('expression -> - expression','expression',2,'p_expression_uminus','parser.py',193),
  ('expression -> ( expression )','expression',3,'p_expression_group','parser.py',198),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','parser.py',203),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','parser.py',208),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','parser.py',213),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',218),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',225),
  ('flowctrl -> IF ( expression_boolean ) { block } elif else','flowctrl',9,'p_flowctrl_if','parser.py',236),
  ('elif -> ELIF ( expression_boolean ) { block } elif','elif',8,'p_elif','parser.py',248),
  ('elif -> <empty>','elif',0,'p_elif','parser.py',249),
  ('else -> ELSE { block }','else',4,'p_else','parser.py',260),
  ('else -> <empty>','else',0,'p_else','parser.py',261),
  ('flowctrl -> WHILE ( expression_boolean ) { block }','flowctrl',7,'p_flowctrl_while','parser.py',268),
]
