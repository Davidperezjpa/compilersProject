
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSAND BOOLEAN BOOLEANDEC ELIF ELSE EQUAL FLOATDEC FNUMBER GREATER GREATEREQUAL IF INTDEC INUMBER LESSEQUAL LESSTHAN NAME NOTEQUAL OR PRINT SEMICOLON STRING STRINGDEC WHILE block : code block\n            | code code : statement SEMICOLON \n            | flowctrl statement : INTDEC NAME is_assing\n    statement : FLOATDEC NAME is_assingstatement : BOOLEANDEC NAME is_assingstatement : STRINGDEC NAME is_assingstatement : PRINT \'(\' expression \')\' statement : NAME "=" expression statement : expressionis_assing : \'=\' expression \n                | expression : expression_booleanexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionexpression_boolean : expression EQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression GREATER expression\n                  | expression LESSTHAN expression\n                  | expression GREATEREQUAL expression\n                  | expression LESSEQUAL expressionexpression_boolean : expression AND expression\n                  | expression OR expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INUMBERexpression : FNUMBERexpression :  BOOLEANexpression :  STRINGexpression : NAME flowctrl : IF \'(\' expression \')\' \'{\' block \'}\' elif else  elif : ELIF \'(\' expression \')\' \'{\' block \'}\' elif\n        |   else : ELSE \'{\' block \'}\' \n        |   flowctrl : WHILE \'(\' expression_boolean \')\' \'{\' block \'}\' '
    
_lr_action_items = {'INTDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[5,5,-4,-3,5,5,-37,-40,-39,-35,5,-38,5,-37,-36,]),'FLOATDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[7,7,-4,-3,7,7,-37,-40,-39,-35,7,-38,7,-37,-36,]),'BOOLEANDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[8,8,-4,-3,8,8,-37,-40,-39,-35,8,-38,8,-37,-36,]),'STRINGDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[9,9,-4,-3,9,9,-37,-40,-39,-35,9,-38,9,-37,-36,]),'PRINT':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[10,10,-4,-3,10,10,-37,-40,-39,-35,10,-38,10,-37,-36,]),'NAME':([0,2,4,5,7,8,9,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[6,6,-4,23,25,26,27,30,30,-3,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,6,6,-37,-40,-39,-35,30,6,-38,6,-37,-36,]),'IF':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[13,13,-4,-3,13,13,-37,-40,-39,-35,13,-38,13,-37,-36,]),'WHILE':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[14,14,-4,-3,14,14,-37,-40,-39,-35,14,-38,14,-37,-36,]),'-':([0,2,4,6,11,12,15,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[16,16,-4,-34,16,32,-14,16,-30,-31,-32,-33,-3,16,16,32,-34,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-28,16,32,32,-29,-15,-16,-17,-18,32,32,32,32,32,32,32,32,32,32,-14,32,32,16,16,-37,-40,-39,-35,16,16,32,-38,16,-37,-36,]),'(':([0,2,4,10,11,13,14,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,82,83,85,86,90,91,93,94,],[11,11,-4,28,11,44,45,11,-3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-37,-40,-39,85,-35,11,11,-38,11,-37,-36,]),'INUMBER':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[17,17,-4,17,17,-3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-37,-40,-39,-35,17,17,-38,17,-37,-36,]),'FNUMBER':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[18,18,-4,18,18,-3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-37,-40,-39,-35,18,18,-38,18,-37,-36,]),'BOOLEAN':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[19,19,-4,19,19,-3,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-37,-40,-39,-35,19,19,-38,19,-37,-36,]),'STRING':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[20,20,-4,20,20,-3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-37,-40,-39,-35,20,20,-38,20,-37,-36,]),'$end':([1,2,4,21,22,79,80,81,83,90,93,94,],[0,-2,-4,-1,-3,-37,-40,-39,-35,-38,-37,-36,]),'}':([2,4,21,22,77,78,79,80,81,83,88,90,92,93,94,],[-2,-4,-1,-3,79,80,-37,-40,-39,-35,90,-38,93,-37,-36,]),'SEMICOLON':([3,6,12,15,17,18,19,20,23,25,26,27,30,46,47,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,72,],[22,-34,-11,-14,-30,-31,-32,-33,-13,-13,-13,-13,-34,-28,-5,-10,-6,-7,-8,-29,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-12,-9,]),'=':([6,23,25,26,27,],[24,48,48,48,48,]),'+':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,31,-14,-30,-31,-32,-33,31,-34,-28,31,31,-29,-15,-16,-17,-18,31,31,31,31,31,31,31,31,31,31,-14,31,31,31,]),'*':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,33,-14,-30,-31,-32,-33,33,-34,-28,33,33,-29,33,33,-17,-18,33,33,33,33,33,33,33,33,33,33,-14,33,33,33,]),'/':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,34,-14,-30,-31,-32,-33,34,-34,-28,34,34,-29,34,34,-17,-18,34,34,34,34,34,34,34,34,34,34,-14,34,34,34,]),'^':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,35,-14,-30,-31,-32,-33,35,-34,-28,35,35,-29,-15,-16,-17,-18,35,35,35,35,35,35,35,35,35,35,-14,35,35,35,]),'EQUAL':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,36,-14,-30,-31,-32,-33,36,-34,-28,36,36,-29,-15,-16,-17,-18,36,36,36,36,36,36,36,36,36,36,-14,36,36,36,]),'NOTEQUAL':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,37,-14,-30,-31,-32,-33,37,-34,-28,37,37,-29,-15,-16,-17,-18,37,37,37,37,37,37,37,37,37,37,-14,37,37,37,]),'GREATER':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,38,-14,-30,-31,-32,-33,38,-34,-28,38,38,-29,-15,-16,-17,-18,38,38,38,38,38,38,38,38,38,38,-14,38,38,38,]),'LESSTHAN':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,39,-14,-30,-31,-32,-33,39,-34,-28,39,39,-29,-15,-16,-17,-18,39,39,39,39,39,39,39,39,39,39,-14,39,39,39,]),'GREATEREQUAL':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,40,-14,-30,-31,-32,-33,40,-34,-28,40,40,-29,-15,-16,-17,-18,40,40,40,40,40,40,40,40,40,40,-14,40,40,40,]),'LESSEQUAL':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,41,-14,-30,-31,-32,-33,41,-34,-28,41,41,-29,-15,-16,-17,-18,41,41,41,41,41,41,41,41,41,41,-14,41,41,41,]),'AND':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,42,-14,-30,-31,-32,-33,42,-34,-28,42,42,-29,-15,-16,-17,-18,42,42,42,42,42,42,42,42,42,42,-14,42,42,42,]),'OR':([6,12,15,17,18,19,20,29,30,46,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87,],[-34,43,-14,-30,-31,-32,-33,43,-34,-28,43,43,-29,-15,-16,-17,-18,43,43,43,43,43,43,43,43,43,43,-14,43,43,43,]),')':([15,17,18,19,20,29,30,46,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,87,],[-14,-30,-31,-32,-33,54,-34,-28,72,-29,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,73,74,89,]),'{':([73,74,84,89,],[75,76,86,91,]),'ELIF':([79,93,],[82,82,]),'ELSE':([79,81,93,94,],[-37,84,-37,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block':([0,2,75,76,86,91,],[1,21,77,78,88,92,]),'code':([0,2,75,76,86,91,],[2,2,2,2,2,2,]),'statement':([0,2,75,76,86,91,],[3,3,3,3,3,3,]),'flowctrl':([0,2,75,76,86,91,],[4,4,4,4,4,4,]),'expression':([0,2,11,16,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,85,86,91,],[12,12,29,46,49,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,12,12,87,12,12,]),'expression_boolean':([0,2,11,16,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,85,86,91,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,69,15,15,15,15,15,15,]),'is_assing':([23,25,26,27,],[47,50,51,52,]),'elif':([79,93,],[81,94,]),'else':([81,],[83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> code block','block',2,'p_block','parser.py',18),
  ('block -> code','block',1,'p_block','parser.py',19),
  ('code -> statement SEMICOLON','code',2,'p_code','parser.py',26),
  ('code -> flowctrl','code',1,'p_code','parser.py',27),
  ('statement -> INTDEC NAME is_assing','statement',3,'p_statement_declare_int','parser.py',31),
  ('statement -> FLOATDEC NAME is_assing','statement',3,'p_statement_declare_float','parser.py',47),
  ('statement -> BOOLEANDEC NAME is_assing','statement',3,'p_statement_declare_boolean','parser.py',58),
  ('statement -> STRINGDEC NAME is_assing','statement',3,'p_statement_declare_string','parser.py',69),
  ('statement -> PRINT ( expression )','statement',4,'p_statement_print','parser.py',80),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','parser.py',86),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',94),
  ('is_assing -> = expression','is_assing',2,'p_is_assing','parser.py',98),
  ('is_assing -> <empty>','is_assing',0,'p_is_assing','parser.py',99),
  ('expression -> expression_boolean','expression',1,'p_bridge_expr','parser.py',110),
  ('expression -> expression + expression','expression',3,'p_expression_binop','parser.py',115),
  ('expression -> expression - expression','expression',3,'p_expression_binop','parser.py',116),
  ('expression -> expression * expression','expression',3,'p_expression_binop','parser.py',117),
  ('expression -> expression / expression','expression',3,'p_expression_binop','parser.py',118),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','parser.py',119),
  ('expression_boolean -> expression EQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',143),
  ('expression_boolean -> expression NOTEQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',144),
  ('expression_boolean -> expression GREATER expression','expression_boolean',3,'p_expression_compare','parser.py',145),
  ('expression_boolean -> expression LESSTHAN expression','expression_boolean',3,'p_expression_compare','parser.py',146),
  ('expression_boolean -> expression GREATEREQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',147),
  ('expression_boolean -> expression LESSEQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',148),
  ('expression_boolean -> expression AND expression','expression_boolean',3,'p_expression_boolean_andor','parser.py',176),
  ('expression_boolean -> expression OR expression','expression_boolean',3,'p_expression_boolean_andor','parser.py',177),
  ('expression -> - expression','expression',2,'p_expression_uminus','parser.py',191),
  ('expression -> ( expression )','expression',3,'p_expression_group','parser.py',196),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','parser.py',201),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','parser.py',206),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','parser.py',211),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',216),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',221),
  ('flowctrl -> IF ( expression ) { block } elif else','flowctrl',9,'p_flowctrl_if','parser.py',232),
  ('elif -> ELIF ( expression ) { block } elif','elif',8,'p_elif','parser.py',244),
  ('elif -> <empty>','elif',0,'p_elif','parser.py',245),
  ('else -> ELSE { block }','else',4,'p_else','parser.py',256),
  ('else -> <empty>','else',0,'p_else','parser.py',257),
  ('flowctrl -> WHILE ( expression_boolean ) { block }','flowctrl',7,'p_flowctrl_while','parser.py',264),
]
