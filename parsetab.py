
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSBOOLEAN BOOLEANDEC FLOATDEC FNUMBER INTDEC INUMBER NAME PRINT SEMICOLON STRING STRINGDECcode : statement SEMICOLONstatement : INTDEC NAME is_assing\n    is_assing : "=" expression \n                | statement : FLOATDEC NAME is_assingstatement : BOOLEANDEC NAME is_assingstatement : STRINGDEC NAME is_assingstatement : PRINT \'(\' expression \')\' statement : NAME "=" expressionstatement : expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INUMBERexpression : FNUMBERexpression :  BOOLEANexpression :  STRINGexpression : NAME'
    
_lr_action_items = {'INTDEC':([0,],[3,]),'FLOATDEC':([0,],[5,]),'BOOLEANDEC':([0,],[6,]),'STRINGDEC':([0,],[7,]),'PRINT':([0,],[8,]),'NAME':([0,3,5,6,7,9,11,18,22,25,26,27,28,29,32,],[4,17,19,20,21,24,24,24,24,24,24,24,24,24,24,]),'-':([0,4,9,10,11,12,13,14,15,18,22,23,24,25,26,27,28,29,30,32,33,37,38,39,40,41,42,43,44,],[11,-22,11,26,11,-18,-19,-20,-21,11,11,26,-22,11,11,11,11,11,-16,11,26,26,-17,-11,-12,-13,-14,26,26,]),'(':([0,8,9,11,18,22,25,26,27,28,29,32,],[9,22,9,9,9,9,9,9,9,9,9,9,]),'INUMBER':([0,9,11,18,22,25,26,27,28,29,32,],[12,12,12,12,12,12,12,12,12,12,12,]),'FNUMBER':([0,9,11,18,22,25,26,27,28,29,32,],[13,13,13,13,13,13,13,13,13,13,13,]),'BOOLEAN':([0,9,11,18,22,25,26,27,28,29,32,],[14,14,14,14,14,14,14,14,14,14,14,]),'STRING':([0,9,11,18,22,25,26,27,28,29,32,],[15,15,15,15,15,15,15,15,15,15,15,]),'$end':([1,16,],[0,-1,]),'SEMICOLON':([2,4,10,12,13,14,15,17,19,20,21,24,30,31,33,34,35,36,38,39,40,41,42,43,44,45,],[16,-22,-10,-18,-19,-20,-21,-4,-4,-4,-4,-22,-16,-2,-9,-5,-6,-7,-17,-11,-12,-13,-14,-15,-3,-8,]),'=':([4,17,19,20,21,],[18,32,32,32,32,]),'+':([4,10,12,13,14,15,23,24,30,33,37,38,39,40,41,42,43,44,],[-22,25,-18,-19,-20,-21,25,-22,-16,25,25,-17,-11,-12,-13,-14,25,25,]),'*':([4,10,12,13,14,15,23,24,30,33,37,38,39,40,41,42,43,44,],[-22,27,-18,-19,-20,-21,27,-22,-16,27,27,-17,27,27,-13,-14,27,27,]),'/':([4,10,12,13,14,15,23,24,30,33,37,38,39,40,41,42,43,44,],[-22,28,-18,-19,-20,-21,28,-22,-16,28,28,-17,28,28,-13,-14,28,28,]),'^':([4,10,12,13,14,15,23,24,30,33,37,38,39,40,41,42,43,44,],[-22,29,-18,-19,-20,-21,29,-22,-16,29,29,-17,-11,-12,-13,-14,29,29,]),')':([12,13,14,15,23,24,30,37,38,39,40,41,42,43,],[-18,-19,-20,-21,38,-22,-16,45,-17,-11,-12,-13,-14,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'statement':([0,],[2,]),'expression':([0,9,11,18,22,25,26,27,28,29,32,],[10,23,30,33,37,39,40,41,42,43,44,]),'is_assing':([17,19,20,21,],[31,34,35,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> statement SEMICOLON','code',2,'p_code','compiler.py',104),
  ('statement -> INTDEC NAME is_assing','statement',3,'p_statement_declare_int','compiler.py',107),
  ('is_assing -> = expression','is_assing',2,'p_is_assing','compiler.py',115),
  ('is_assing -> <empty>','is_assing',0,'p_is_assing','compiler.py',116),
  ('statement -> FLOATDEC NAME is_assing','statement',3,'p_statement_declare_float','compiler.py',122),
  ('statement -> BOOLEANDEC NAME is_assing','statement',3,'p_statement_declare_boolean','compiler.py',126),
  ('statement -> STRINGDEC NAME is_assing','statement',3,'p_statement_declare_string','compiler.py',130),
  ('statement -> PRINT ( expression )','statement',4,'p_statement_print','compiler.py',134),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','compiler.py',138),
  ('statement -> expression','statement',1,'p_statement_expr','compiler.py',144),
  ('expression -> expression + expression','expression',3,'p_expression_binop','compiler.py',148),
  ('expression -> expression - expression','expression',3,'p_expression_binop','compiler.py',149),
  ('expression -> expression * expression','expression',3,'p_expression_binop','compiler.py',150),
  ('expression -> expression / expression','expression',3,'p_expression_binop','compiler.py',151),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','compiler.py',152),
  ('expression -> - expression','expression',2,'p_expression_uminus','compiler.py',165),
  ('expression -> ( expression )','expression',3,'p_expression_group','compiler.py',169),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','compiler.py',173),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','compiler.py',177),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','compiler.py',181),
  ('expression -> STRING','expression',1,'p_expression_string','compiler.py',185),
  ('expression -> NAME','expression',1,'p_expression_name','compiler.py',191),
]
