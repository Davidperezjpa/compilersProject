
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSAND BOOLEAN BOOLEANDEC ELIF ELSE EQUAL FLOATDEC FNUMBER GREATER GREATEREQUAL IF INTDEC INUMBER LESSEQUAL LESSTHAN NAME NOTEQUAL OR PRINT SEMICOLON STRING STRINGDEC WHILE block : code block\n            | code code : statement SEMICOLON \n            | flowctrl statement : INTDEC NAME is_assing\n    statement : FLOATDEC NAME is_assingstatement : BOOLEANDEC NAME is_assingstatement : STRINGDEC NAME is_assingstatement : PRINT \'(\' expression \')\' statement : NAME "=" expression statement : expressionis_assing : "=" expression \n                | expression : expression_boolean\n                | expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionexpression_boolean : expression EQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression GREATER expression\n                  | expression LESSTHAN expression\n                  | expression GREATEREQUAL expression\n                  | expression LESSEQUAL expressionexpression_boolean : expression AND expression\n                  | expression OR expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INUMBERexpression : FNUMBERexpression_boolean :  BOOLEANexpression :  STRINGexpression : NAME flowctrl : IF \'(\' expression_boolean \')\' \'{\' block \'}\' elif else  elif : ELIF \'(\' expression_boolean \')\' \'{\' block \'}\' elif\n        |   else : ELSE \'{\' block \'}\' \n        |   flowctrl : WHILE \'(\' expression_boolean \')\' \'{\' block \'}\' '
    
_lr_action_items = {'INTDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[5,5,-4,-3,5,5,-38,-41,-40,-36,5,-39,5,-38,-37,]),'FLOATDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[7,7,-4,-3,7,7,-38,-41,-40,-36,7,-39,7,-38,-37,]),'BOOLEANDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[8,8,-4,-3,8,8,-38,-41,-40,-36,8,-39,8,-38,-37,]),'STRINGDEC':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[9,9,-4,-3,9,9,-38,-41,-40,-36,9,-39,9,-38,-37,]),'PRINT':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[10,10,-4,-3,10,10,-38,-41,-40,-36,10,-39,10,-38,-37,]),'NAME':([0,2,4,5,7,8,9,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[6,6,-4,23,25,26,27,30,30,-3,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,6,6,-38,-41,-40,-36,30,6,-39,6,-38,-37,]),'IF':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[13,13,-4,-3,13,13,-38,-41,-40,-36,13,-39,13,-38,-37,]),'WHILE':([0,2,4,22,75,76,79,80,81,83,86,90,91,93,94,],[15,15,-4,-3,15,15,-38,-41,-40,-36,15,-39,15,-38,-37,]),'+':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,31,-14,-15,-31,-32,-34,-33,-3,-15,-15,31,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,31,31,-30,-16,-17,-18,-19,31,31,31,31,31,31,31,31,31,-14,31,-14,31,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'-':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[16,16,-4,-35,16,32,-14,16,-31,-32,-34,-33,-3,16,16,32,-35,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-29,16,32,32,-30,-16,-17,-18,-19,32,32,32,32,32,32,32,32,32,-14,32,-14,32,16,16,-38,-41,-40,-36,16,16,-14,-39,16,-38,-37,]),'*':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,33,-14,-15,-31,-32,-34,-33,-3,-15,-15,33,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,33,33,-30,33,33,-18,-19,33,33,33,33,33,33,33,33,33,-14,33,-14,33,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'/':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,34,-14,-15,-31,-32,-34,-33,-3,-15,-15,34,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,34,34,-30,34,34,-18,-19,34,34,34,34,34,34,34,34,34,-14,34,-14,34,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'^':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,35,-14,-15,-31,-32,-34,-33,-3,-15,-15,35,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,35,35,-30,-16,-17,-18,-19,35,35,35,35,35,35,35,35,35,-14,35,-14,35,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'EQUAL':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,36,-14,-15,-31,-32,-34,-33,-3,-15,-15,36,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,36,36,-30,-16,-17,-18,-19,36,36,36,36,36,36,36,36,36,-14,36,-14,36,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'NOTEQUAL':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,37,-14,-15,-31,-32,-34,-33,-3,-15,-15,37,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,37,37,-30,-16,-17,-18,-19,37,37,37,37,37,37,37,37,37,-14,37,-14,37,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'GREATER':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,38,-14,-15,-31,-32,-34,-33,-3,-15,-15,38,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,38,38,-30,-16,-17,-18,-19,38,38,38,38,38,38,38,38,38,-14,38,-14,38,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'LESSTHAN':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,39,-14,-15,-31,-32,-34,-33,-3,-15,-15,39,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,39,39,-30,-16,-17,-18,-19,39,39,39,39,39,39,39,39,39,-14,39,-14,39,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'GREATEREQUAL':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,40,-14,-15,-31,-32,-34,-33,-3,-15,-15,40,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,40,40,-30,-16,-17,-18,-19,40,40,40,40,40,40,40,40,40,-14,40,-14,40,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'LESSEQUAL':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,41,-14,-15,-31,-32,-34,-33,-3,-15,-15,41,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,41,41,-30,-16,-17,-18,-19,41,41,41,41,41,41,41,41,41,-14,41,-14,41,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'AND':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,42,-14,-15,-31,-32,-34,-33,-3,-15,-15,42,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,42,42,-30,-16,-17,-18,-19,42,42,42,42,42,42,42,42,42,-14,42,-14,42,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'OR':([0,2,4,6,11,12,14,16,17,18,19,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,75,76,79,80,81,83,85,86,87,90,91,93,94,],[-15,-15,-4,-35,-15,43,-14,-15,-31,-32,-34,-33,-3,-15,-15,43,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-15,43,43,-30,-16,-17,-18,-19,43,43,43,43,43,43,43,43,43,-14,43,-14,43,-15,-15,-38,-41,-40,-36,-15,-15,-14,-39,-15,-38,-37,]),'SEMICOLON':([0,2,3,4,6,12,14,16,17,18,19,20,22,23,24,25,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,71,72,75,76,79,80,81,83,86,90,91,93,94,],[-15,-15,22,-4,-35,-11,-14,-15,-31,-32,-34,-33,-3,-13,-15,-13,-13,-13,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,-5,-15,-10,-6,-7,-8,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-12,-9,-15,-15,-38,-41,-40,-36,-15,-39,-15,-38,-37,]),'(':([0,2,4,10,11,13,15,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,82,83,85,86,90,91,93,94,],[11,11,-4,28,11,44,45,11,-3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-38,-41,-40,85,-36,11,11,-39,11,-38,-37,]),'INUMBER':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[17,17,-4,17,17,-3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-38,-41,-40,-36,17,17,-39,17,-38,-37,]),'FNUMBER':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[18,18,-4,18,18,-3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-38,-41,-40,-36,18,18,-39,18,-38,-37,]),'STRING':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[19,19,-4,19,19,-3,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-38,-41,-40,-36,19,19,-39,19,-38,-37,]),'BOOLEAN':([0,2,4,11,16,22,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,79,80,81,83,85,86,90,91,93,94,],[20,20,-4,20,20,-3,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-38,-41,-40,-36,20,20,-39,20,-38,-37,]),'$end':([1,2,4,21,22,79,80,81,83,90,93,94,],[0,-2,-4,-1,-3,-38,-41,-40,-36,-39,-38,-37,]),'}':([2,4,21,22,77,78,79,80,81,83,88,90,92,93,94,],[-2,-4,-1,-3,79,80,-38,-41,-40,-36,90,-39,93,-38,-37,]),'=':([6,23,25,26,27,],[24,48,48,48,48,]),')':([11,14,16,17,18,19,20,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,87,],[-15,-14,-15,-31,-32,-34,-33,-15,54,-35,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-29,72,-30,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,73,74,89,]),'{':([73,74,84,89,],[75,76,86,91,]),'ELIF':([79,93,],[82,82,]),'ELSE':([79,81,93,94,],[-38,84,-38,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block':([0,2,75,76,86,91,],[1,21,77,78,88,92,]),'code':([0,2,75,76,86,91,],[2,2,2,2,2,2,]),'statement':([0,2,75,76,86,91,],[3,3,3,3,3,3,]),'flowctrl':([0,2,75,76,86,91,],[4,4,4,4,4,4,]),'expression':([0,2,11,16,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,85,86,91,],[12,12,29,46,49,53,55,56,57,58,59,60,61,62,63,64,65,66,67,69,69,71,12,12,69,12,12,]),'expression_boolean':([0,2,11,16,24,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,75,76,85,86,91,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,68,70,14,14,14,87,14,14,]),'is_assing':([23,25,26,27,],[47,50,51,52,]),'elif':([79,93,],[81,94,]),'else':([81,],[83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> code block','block',2,'p_block','parser.py',17),
  ('block -> code','block',1,'p_block','parser.py',18),
  ('code -> statement SEMICOLON','code',2,'p_code','parser.py',22),
  ('code -> flowctrl','code',1,'p_code','parser.py',23),
  ('statement -> INTDEC NAME is_assing','statement',3,'p_statement_declare_int','parser.py',27),
  ('statement -> FLOATDEC NAME is_assing','statement',3,'p_statement_declare_float','parser.py',35),
  ('statement -> BOOLEANDEC NAME is_assing','statement',3,'p_statement_declare_boolean','parser.py',39),
  ('statement -> STRINGDEC NAME is_assing','statement',3,'p_statement_declare_string','parser.py',43),
  ('statement -> PRINT ( expression )','statement',4,'p_statement_print','parser.py',47),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','parser.py',51),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',57),
  ('is_assing -> = expression','is_assing',2,'p_is_assing','parser.py',61),
  ('is_assing -> <empty>','is_assing',0,'p_is_assing','parser.py',62),
  ('expression -> expression_boolean','expression',1,'p_bridge_expr_boolean','parser.py',72),
  ('expression -> <empty>','expression',0,'p_bridge_expr_boolean','parser.py',73),
  ('expression -> expression + expression','expression',3,'p_expression_binop','parser.py',78),
  ('expression -> expression - expression','expression',3,'p_expression_binop','parser.py',79),
  ('expression -> expression * expression','expression',3,'p_expression_binop','parser.py',80),
  ('expression -> expression / expression','expression',3,'p_expression_binop','parser.py',81),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','parser.py',82),
  ('expression_boolean -> expression EQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',96),
  ('expression_boolean -> expression NOTEQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',97),
  ('expression_boolean -> expression GREATER expression','expression_boolean',3,'p_expression_compare','parser.py',98),
  ('expression_boolean -> expression LESSTHAN expression','expression_boolean',3,'p_expression_compare','parser.py',99),
  ('expression_boolean -> expression GREATEREQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',100),
  ('expression_boolean -> expression LESSEQUAL expression','expression_boolean',3,'p_expression_compare','parser.py',101),
  ('expression_boolean -> expression AND expression','expression_boolean',3,'p_expression_boolean_andor','parser.py',120),
  ('expression_boolean -> expression OR expression','expression_boolean',3,'p_expression_boolean_andor','parser.py',121),
  ('expression -> - expression','expression',2,'p_expression_uminus','parser.py',133),
  ('expression -> ( expression )','expression',3,'p_expression_group','parser.py',138),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','parser.py',143),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','parser.py',148),
  ('expression_boolean -> BOOLEAN','expression_boolean',1,'p_expression_boolean','parser.py',153),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',158),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',165),
  ('flowctrl -> IF ( expression_boolean ) { block } elif else','flowctrl',9,'p_flowctrl_if','parser.py',176),
  ('elif -> ELIF ( expression_boolean ) { block } elif','elif',8,'p_elif','parser.py',181),
  ('elif -> <empty>','elif',0,'p_elif','parser.py',182),
  ('else -> ELSE { block }','else',4,'p_else','parser.py',187),
  ('else -> <empty>','else',0,'p_else','parser.py',188),
  ('flowctrl -> WHILE ( expression_boolean ) { block }','flowctrl',7,'p_flowctrl_while','parser.py',193),
]
